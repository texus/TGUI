/**
 * Loader generated by glad 2.0.0-beta on Sat May 29 14:05:45 2021
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 0
 *
 * APIs:
 *  - gles2=3.2
 *
 * Options:
 *  - ALIAS = True
 *  - DEBUG = False
 *  - HEADER_ONLY = True
 *  - LOADER = False
 *  - MX = False
 *  - MX_GLOBAL = False
 *  - ON_DEMAND = False
 *
 * Commandline:
 *    --api='gles2=3.2' --extensions='' c --alias --header-only
 *
 * Online:
 *    http://glad.sh/#api=gles2%3D3.2&extensions=&generator=c&options=ALIAS%2CHEADER_ONLY
 *
 */

// Some defines and functions have been prefixed with "TGUI_" or "tgui_" in this file to prevent potential name collisions.

#ifndef TGUI_GLAD_GLES2_H_
#define TGUI_GLAD_GLES2_H_

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifdef __gl2_h_
  #error OpenGL ES 2 header already included (API: gles2), remove previous include!
#endif
#define __gl2_h_ 1
#ifdef __gl3_h_
  #error OpenGL ES 3 header already included (API: gles2), remove previous include!
#endif
#define __gl3_h_ 1
#ifdef __clang__
#pragma clang diagnostic pop
#endif

#define TGUI_GLAD_GLES2
#define TGUI_GLAD_OPTION_GLES2_ALIAS
#define TGUI_GLAD_OPTION_GLES2_HEADER_ONLY

#ifdef __cplusplus
extern "C" {
#endif

#ifndef TGUI_GLAD_PLATFORM_H_
#define TGUI_GLAD_PLATFORM_H_

#ifndef TGUI_GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define TGUI_GLAD_PLATFORM_WIN32 1
  #else
    #define TGUI_GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef TGUI_GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define TGUI_GLAD_PLATFORM_APPLE 1
  #else
    #define TGUI_GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef TGUI_GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define TGUI_GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define TGUI_GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef TGUI_GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(TGUI_GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define TGUI_GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define TGUI_GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef TGUI_GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define TGUI_GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef TGUI_GLAD_PLATFORM_UWP
    #define TGUI_GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define TGUI_GLAD_GNUC_EXTENSION __extension__
#else
  #define TGUI_GLAD_GNUC_EXTENSION
#endif

#ifndef TGUI_GLAD_API_CALL
  #if defined(TGUI_GLAD_API_CALL_EXPORT)
    #if TGUI_GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(TGUI_GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define TGUI_GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define TGUI_GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define TGUI_GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define TGUI_GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(TGUI_GLAD_API_CALL_EXPORT_BUILD)
      #define TGUI_GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define TGUI_GLAD_API_CALL extern
    #endif
  #else
    #define TGUI_GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define TGUI_GLAD_API_PTR APIENTRY
#elif TGUI_GLAD_PLATFORM_WIN32
  #define TGUI_GLAD_API_PTR __stdcall
#else
  #define TGUI_GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI TGUI_GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY TGUI_GLAD_API_PTR
#endif

#define TGUI_GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define TGUI_GLAD_VERSION_MAJOR(version) (version / 10000)
#define TGUI_GLAD_VERSION_MINOR(version) (version % 10000)

#define TGUI_GLAD_GENERATOR_VERSION "2.0.0-beta"

typedef void (*TGUI_GLADapiproc)(void);

typedef TGUI_GLADapiproc (*TGUI_GLADloadfunc)(const char *name);
typedef TGUI_GLADapiproc (*TGUI_GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*TGUI_GLADprecallback)(const char *name, TGUI_GLADapiproc apiproc, int len_args, ...);
typedef void (*TGUI_GLADpostcallback)(void *ret, const char *name, TGUI_GLADapiproc apiproc, int len_args, ...);

#endif /* TGUI_GLAD_PLATFORM_H_ */

#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALPHA 0x1906
#define GL_ALPHA_BITS 0x0D55
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALWAYS 0x0207
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_SIZE 0x92FB
#define GL_ARRAY_STRIDE 0x92FE
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_BACK 0x0405
#define GL_BLEND 0x0BE2
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLOCK_INDEX 0x92FD
#define GL_BLUE 0x1905
#define GL_BLUE_BITS 0x0D54
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BUFFER 0x82E0
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_BYTE 0x1400
#define GL_CCW 0x0901
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_COLOR 0x1800
#define GL_COLORBURN 0x929A
#define GL_COLORDODGE 0x9299
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPILE_STATUS 0x8B81
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPUTE_SHADER 0x91B9
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_LOST 0x0507
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CW 0x0900
#define GL_DARKEN 0x9297
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DECR 0x1E03
#define GL_DECR_WRAP 0x8508
#define GL_DELETE_STATUS 0x8B80
#define GL_DEPTH 0x1801
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DIFFERENCE 0x929E
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_DITHER 0x0BD0
#define GL_DONT_CARE 0x1100
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_EQUAL 0x0202
#define GL_EXCLUSION 0x92A0
#define GL_EXTENSIONS 0x1F03
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIXED 0x140C
#define GL_FLOAT 0x1406
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_BITS 0x0D53
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_HALF_FLOAT 0x140B
#define GL_HARDLIGHT 0x929B
#define GL_HIGH_FLOAT 0x8DF2
#define GL_HIGH_INT 0x8DF5
#define GL_HSL_COLOR 0x92AF
#define GL_HSL_HUE 0x92AD
#define GL_HSL_LUMINOSITY 0x92B0
#define GL_HSL_SATURATION 0x92AE
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_INCR 0x1E02
#define GL_INCR_WRAP 0x8507
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INT 0x1404
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERT 0x150A
#define GL_ISOLINES 0x8E7A
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_ROW_MAJOR 0x9300
#define GL_KEEP 0x1E00
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LIGHTEN 0x9298
#define GL_LINEAR 0x2601
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_WIDTH 0x0B21
#define GL_LINK_STATUS 0x8B82
#define GL_LOCATION 0x930E
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOW_FLOAT 0x8DF0
#define GL_LOW_INT 0x8DF3
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_MAJOR_VERSION 0x821B
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MATRIX_STRIDE 0x92FF
#define GL_MAX 0x8008
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_MEDIUM_INT 0x8DF4
#define GL_MIN 0x8007
#define GL_MINOR_VERSION 0x821C
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MULTIPLY 0x9294
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381
#define GL_NAME_LENGTH 0x92F9
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_EXTENSIONS 0x821D
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_OBJECT_TYPE 0x9112
#define GL_OFFSET 0x92FC
#define GL_ONE 1
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OUT_OF_MEMORY 0x0505
#define GL_OVERLAY 0x9296
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_POINTS 0x0000
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVE_BOUNDING_BOX 0x92BE
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_QUADS 0x0007
#define GL_QUERY 0x82E3
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R16F 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32F 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R8_SNORM 0x8F94
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_READ_BUFFER 0x0C02
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_ONLY 0x88B8
#define GL_READ_WRITE 0x88BA
#define GL_RED 0x1903
#define GL_RED_BITS 0x0D52
#define GL_RED_INTEGER 0x8D94
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERER 0x1F01
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RG 0x8227
#define GL_RG16F 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32F 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG8_SNORM 0x8F95
#define GL_RGB 0x1907
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2UI 0x906F
#define GL_RGB16F 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB32F 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB565 0x8D62
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGB8I 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB8_SNORM 0x8F96
#define GL_RGB9_E5 0x8C3D
#define GL_RGBA 0x1908
#define GL_RGBA16F 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8_SNORM 0x8F97
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGB_INTEGER 0x8D98
#define GL_RG_INTEGER 0x8228
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_BINDING 0x8919
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SCREEN 0x9295
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SHADER 0x82E1
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHORT 0x1402
#define GL_SIGNALED 0x9119
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_SOFTLIGHT 0x929C
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STENCIL 0x1802
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_STATUS 0x9114
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRUE 1
#define GL_TYPE 0x92FA
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_SHORT 0x1403
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VIEWPORT 0x0BA2
#define GL_WAIT_FAILED 0x911D
#define GL_WRITE_ONLY 0x88B9
#define GL_ZERO 0


#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_TGUI_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_TGUI_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

#if defined(__SCITECH_SNAP__) && !defined(KHRONOS_STATIC)
#   define KHRONOS_STATIC 1
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(KHRONOS_STATIC)
    /* If the preprocessor constant KHRONOS_STATIC is defined, make the
     * header compatible with static linking. */
#   define KHRONOS_APICALL
#elif defined(_WIN32)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_TGUI_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_TGUI_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_TGUI_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */

typedef unsigned int GLenum;

typedef unsigned char GLboolean;

typedef unsigned int GLbitfield;

typedef void GLvoid;

typedef khronos_int8_t GLbyte;

typedef khronos_uint8_t GLubyte;

typedef khronos_int16_t GLshort;

typedef khronos_uint16_t GLushort;

typedef int GLint;

typedef unsigned int GLuint;

typedef khronos_int32_t GLclampx;

typedef int GLsizei;

typedef khronos_float_t GLfloat;

typedef khronos_float_t GLclampf;

typedef double GLdouble;

typedef double GLclampd;

typedef void *GLeglClientBufferEXT;

typedef void *GLeglImageOES;

typedef char GLchar;

typedef char GLcharARB;

#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif

typedef khronos_uint16_t GLhalf;

typedef khronos_uint16_t GLhalfARB;

typedef khronos_int32_t GLfixed;

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptrARB;
#else
typedef khronos_intptr_t GLintptrARB;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptrARB;
#else
typedef khronos_ssize_t GLsizeiptrARB;
#endif

typedef khronos_int64_t GLint64;

typedef khronos_int64_t GLint64EXT;

typedef khronos_uint64_t GLuint64;

typedef khronos_uint64_t GLuint64EXT;

typedef struct __GLsync *GLsync;

struct _cl_context;

struct _cl_event;

typedef void (TGUI_GLAD_API_PTR *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (TGUI_GLAD_API_PTR *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (TGUI_GLAD_API_PTR *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (TGUI_GLAD_API_PTR *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);

typedef unsigned short GLhalfNV;

typedef GLintptr GLvdpauSurfaceNV;

typedef void (TGUI_GLAD_API_PTR *GLVULKANPROCNV)(void);



#define GL_ES_VERSION_2_0 1
TGUI_GLAD_API_CALL int TGUI_GLAD_GL_ES_VERSION_2_0;
#define GL_ES_VERSION_3_0 1
TGUI_GLAD_API_CALL int TGUI_GLAD_GL_ES_VERSION_3_0;
#define GL_ES_VERSION_3_1 1
TGUI_GLAD_API_CALL int TGUI_GLAD_GL_ES_VERSION_3_1;
#define GL_ES_VERSION_3_2 1
TGUI_GLAD_API_CALL int TGUI_GLAD_GL_ES_VERSION_3_2;


typedef void (TGUI_GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void (TGUI_GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (TGUI_GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (TGUI_GLAD_API_PTR *PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (TGUI_GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (TGUI_GLAD_API_PTR *PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDBARRIERPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (TGUI_GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (TGUI_GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (TGUI_GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef GLenum (TGUI_GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef void (TGUI_GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (TGUI_GLAD_API_PTR *PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (TGUI_GLAD_API_PTR *PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (TGUI_GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (TGUI_GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef GLenum (TGUI_GLAD_API_PTR *PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (TGUI_GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLuint (TGUI_GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef GLuint (TGUI_GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum type);
typedef GLuint (TGUI_GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef void (TGUI_GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (TGUI_GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void * userParam);
typedef void (TGUI_GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (TGUI_GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint * pipelines);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint * ids);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint * samplers);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETESYNCPROC)(GLsync sync);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint * ids);
typedef void (TGUI_GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint * arrays);
typedef void (TGUI_GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (TGUI_GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (TGUI_GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (TGUI_GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (TGUI_GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void (TGUI_GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (TGUI_GLAD_API_PTR *PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (TGUI_GLAD_API_PTR *PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (TGUI_GLAD_API_PTR *PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum * bufs);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (TGUI_GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (TGUI_GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void (TGUI_GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (TGUI_GLAD_API_PTR *PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (TGUI_GLAD_API_PTR *PFNGLENDQUERYPROC)(GLenum target);
typedef void (TGUI_GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef GLsync (TGUI_GLAD_API_PTR *PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void (TGUI_GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (TGUI_GLAD_API_PTR *PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (TGUI_GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (TGUI_GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (TGUI_GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (TGUI_GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (TGUI_GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENQUERIESPROC)(GLsizei n, GLuint * ids);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint * samplers);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (TGUI_GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (TGUI_GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef GLuint (TGUI_GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef GLenum (TGUI_GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef GLint (TGUI_GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar * name);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLenum (TGUI_GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPOINTERVPROC)(GLenum pname, void ** params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef GLuint (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint * params);
typedef const GLubyte * (TGUI_GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef const GLubyte * (TGUI_GLAD_API_PTR *PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef GLuint (TGUI_GLAD_API_PTR *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar * uniformBlockName);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef GLint (TGUI_GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (TGUI_GLAD_API_PTR *PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void (TGUI_GLAD_API_PTR *PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef void (TGUI_GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (TGUI_GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void * (TGUI_GLAD_API_PTR *PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (TGUI_GLAD_API_PTR *PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
typedef void (TGUI_GLAD_API_PTR *PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
typedef void (TGUI_GLAD_API_PTR *PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (TGUI_GLAD_API_PTR *PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (TGUI_GLAD_API_PTR *PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef void (TGUI_GLAD_API_PTR *PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (TGUI_GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (TGUI_GLAD_API_PTR *PFNGLPOPDEBUGGROUPPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLPRIMITIVEBOUNDINGBOXPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (TGUI_GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (TGUI_GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (TGUI_GLAD_API_PTR *PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (TGUI_GLAD_API_PTR *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (TGUI_GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (TGUI_GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (TGUI_GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (TGUI_GLAD_API_PTR *PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (TGUI_GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (TGUI_GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (TGUI_GLAD_API_PTR *PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (TGUI_GLAD_API_PTR *PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (TGUI_GLAD_API_PTR *PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (TGUI_GLAD_API_PTR *PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (TGUI_GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (TGUI_GLAD_API_PTR *PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (TGUI_GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (TGUI_GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (TGUI_GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (TGUI_GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (TGUI_GLAD_API_PTR *PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (TGUI_GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (TGUI_GLAD_API_PTR *PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (TGUI_GLAD_API_PTR *PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (TGUI_GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (TGUI_GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef GLboolean (TGUI_GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef void (TGUI_GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (TGUI_GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (TGUI_GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (TGUI_GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint * v);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint * v);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (TGUI_GLAD_API_PTR *PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
typedef void (TGUI_GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (TGUI_GLAD_API_PTR *PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);

TGUI_GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC tgui_glad_glActiveShaderProgram;
#define glActiveShaderProgram tgui_glad_glActiveShaderProgram
TGUI_GLAD_API_CALL PFNGLACTIVETEXTUREPROC tgui_glad_glActiveTexture;
#define glActiveTexture tgui_glad_glActiveTexture
TGUI_GLAD_API_CALL PFNGLATTACHSHADERPROC tgui_glad_glAttachShader;
#define glAttachShader tgui_glad_glAttachShader
TGUI_GLAD_API_CALL PFNGLBEGINQUERYPROC tgui_glad_glBeginQuery;
#define glBeginQuery tgui_glad_glBeginQuery
TGUI_GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC tgui_glad_glBeginTransformFeedback;
#define glBeginTransformFeedback tgui_glad_glBeginTransformFeedback
TGUI_GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC tgui_glad_glBindAttribLocation;
#define glBindAttribLocation tgui_glad_glBindAttribLocation
TGUI_GLAD_API_CALL PFNGLBINDBUFFERPROC tgui_glad_glBindBuffer;
#define glBindBuffer tgui_glad_glBindBuffer
TGUI_GLAD_API_CALL PFNGLBINDBUFFERBASEPROC tgui_glad_glBindBufferBase;
#define glBindBufferBase tgui_glad_glBindBufferBase
TGUI_GLAD_API_CALL PFNGLBINDBUFFERRANGEPROC tgui_glad_glBindBufferRange;
#define glBindBufferRange tgui_glad_glBindBufferRange
TGUI_GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC tgui_glad_glBindFramebuffer;
#define glBindFramebuffer tgui_glad_glBindFramebuffer
TGUI_GLAD_API_CALL PFNGLBINDIMAGETEXTUREPROC tgui_glad_glBindImageTexture;
#define glBindImageTexture tgui_glad_glBindImageTexture
TGUI_GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC tgui_glad_glBindProgramPipeline;
#define glBindProgramPipeline tgui_glad_glBindProgramPipeline
TGUI_GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC tgui_glad_glBindRenderbuffer;
#define glBindRenderbuffer tgui_glad_glBindRenderbuffer
TGUI_GLAD_API_CALL PFNGLBINDSAMPLERPROC tgui_glad_glBindSampler;
#define glBindSampler tgui_glad_glBindSampler
TGUI_GLAD_API_CALL PFNGLBINDTEXTUREPROC tgui_glad_glBindTexture;
#define glBindTexture tgui_glad_glBindTexture
TGUI_GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC tgui_glad_glBindTransformFeedback;
#define glBindTransformFeedback tgui_glad_glBindTransformFeedback
TGUI_GLAD_API_CALL PFNGLBINDVERTEXARRAYPROC tgui_glad_glBindVertexArray;
#define glBindVertexArray tgui_glad_glBindVertexArray
TGUI_GLAD_API_CALL PFNGLBINDVERTEXBUFFERPROC tgui_glad_glBindVertexBuffer;
#define glBindVertexBuffer tgui_glad_glBindVertexBuffer
TGUI_GLAD_API_CALL PFNGLBLENDBARRIERPROC tgui_glad_glBlendBarrier;
#define glBlendBarrier tgui_glad_glBlendBarrier
TGUI_GLAD_API_CALL PFNGLBLENDCOLORPROC tgui_glad_glBlendColor;
#define glBlendColor tgui_glad_glBlendColor
TGUI_GLAD_API_CALL PFNGLBLENDEQUATIONPROC tgui_glad_glBlendEquation;
#define glBlendEquation tgui_glad_glBlendEquation
TGUI_GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC tgui_glad_glBlendEquationSeparate;
#define glBlendEquationSeparate tgui_glad_glBlendEquationSeparate
TGUI_GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC tgui_glad_glBlendEquationSeparatei;
#define glBlendEquationSeparatei tgui_glad_glBlendEquationSeparatei
TGUI_GLAD_API_CALL PFNGLBLENDEQUATIONIPROC tgui_glad_glBlendEquationi;
#define glBlendEquationi tgui_glad_glBlendEquationi
TGUI_GLAD_API_CALL PFNGLBLENDFUNCPROC tgui_glad_glBlendFunc;
#define glBlendFunc tgui_glad_glBlendFunc
TGUI_GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC tgui_glad_glBlendFuncSeparate;
#define glBlendFuncSeparate tgui_glad_glBlendFuncSeparate
TGUI_GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIPROC tgui_glad_glBlendFuncSeparatei;
#define glBlendFuncSeparatei tgui_glad_glBlendFuncSeparatei
TGUI_GLAD_API_CALL PFNGLBLENDFUNCIPROC tgui_glad_glBlendFunci;
#define glBlendFunci tgui_glad_glBlendFunci
TGUI_GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC tgui_glad_glBlitFramebuffer;
#define glBlitFramebuffer tgui_glad_glBlitFramebuffer
TGUI_GLAD_API_CALL PFNGLBUFFERDATAPROC tgui_glad_glBufferData;
#define glBufferData tgui_glad_glBufferData
TGUI_GLAD_API_CALL PFNGLBUFFERSUBDATAPROC tgui_glad_glBufferSubData;
#define glBufferSubData tgui_glad_glBufferSubData
TGUI_GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC tgui_glad_glCheckFramebufferStatus;
#define glCheckFramebufferStatus tgui_glad_glCheckFramebufferStatus
TGUI_GLAD_API_CALL PFNGLCLEARPROC tgui_glad_glClear;
#define glClear tgui_glad_glClear
TGUI_GLAD_API_CALL PFNGLCLEARBUFFERFIPROC tgui_glad_glClearBufferfi;
#define glClearBufferfi tgui_glad_glClearBufferfi
TGUI_GLAD_API_CALL PFNGLCLEARBUFFERFVPROC tgui_glad_glClearBufferfv;
#define glClearBufferfv tgui_glad_glClearBufferfv
TGUI_GLAD_API_CALL PFNGLCLEARBUFFERIVPROC tgui_glad_glClearBufferiv;
#define glClearBufferiv tgui_glad_glClearBufferiv
TGUI_GLAD_API_CALL PFNGLCLEARBUFFERUIVPROC tgui_glad_glClearBufferuiv;
#define glClearBufferuiv tgui_glad_glClearBufferuiv
TGUI_GLAD_API_CALL PFNGLCLEARCOLORPROC tgui_glad_glClearColor;
#define glClearColor tgui_glad_glClearColor
TGUI_GLAD_API_CALL PFNGLCLEARDEPTHFPROC tgui_glad_glClearDepthf;
#define glClearDepthf tgui_glad_glClearDepthf
TGUI_GLAD_API_CALL PFNGLCLEARSTENCILPROC tgui_glad_glClearStencil;
#define glClearStencil tgui_glad_glClearStencil
TGUI_GLAD_API_CALL PFNGLCLIENTWAITSYNCPROC tgui_glad_glClientWaitSync;
#define glClientWaitSync tgui_glad_glClientWaitSync
TGUI_GLAD_API_CALL PFNGLCOLORMASKPROC tgui_glad_glColorMask;
#define glColorMask tgui_glad_glColorMask
TGUI_GLAD_API_CALL PFNGLCOLORMASKIPROC tgui_glad_glColorMaski;
#define glColorMaski tgui_glad_glColorMaski
TGUI_GLAD_API_CALL PFNGLCOMPILESHADERPROC tgui_glad_glCompileShader;
#define glCompileShader tgui_glad_glCompileShader
TGUI_GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC tgui_glad_glCompressedTexImage2D;
#define glCompressedTexImage2D tgui_glad_glCompressedTexImage2D
TGUI_GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC tgui_glad_glCompressedTexImage3D;
#define glCompressedTexImage3D tgui_glad_glCompressedTexImage3D
TGUI_GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC tgui_glad_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D tgui_glad_glCompressedTexSubImage2D
TGUI_GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC tgui_glad_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D tgui_glad_glCompressedTexSubImage3D
TGUI_GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC tgui_glad_glCopyBufferSubData;
#define glCopyBufferSubData tgui_glad_glCopyBufferSubData
TGUI_GLAD_API_CALL PFNGLCOPYIMAGESUBDATAPROC tgui_glad_glCopyImageSubData;
#define glCopyImageSubData tgui_glad_glCopyImageSubData
TGUI_GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC tgui_glad_glCopyTexImage2D;
#define glCopyTexImage2D tgui_glad_glCopyTexImage2D
TGUI_GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC tgui_glad_glCopyTexSubImage2D;
#define glCopyTexSubImage2D tgui_glad_glCopyTexSubImage2D
TGUI_GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC tgui_glad_glCopyTexSubImage3D;
#define glCopyTexSubImage3D tgui_glad_glCopyTexSubImage3D
TGUI_GLAD_API_CALL PFNGLCREATEPROGRAMPROC tgui_glad_glCreateProgram;
#define glCreateProgram tgui_glad_glCreateProgram
TGUI_GLAD_API_CALL PFNGLCREATESHADERPROC tgui_glad_glCreateShader;
#define glCreateShader tgui_glad_glCreateShader
TGUI_GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC tgui_glad_glCreateShaderProgramv;
#define glCreateShaderProgramv tgui_glad_glCreateShaderProgramv
TGUI_GLAD_API_CALL PFNGLCULLFACEPROC tgui_glad_glCullFace;
#define glCullFace tgui_glad_glCullFace
TGUI_GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKPROC tgui_glad_glDebugMessageCallback;
#define glDebugMessageCallback tgui_glad_glDebugMessageCallback
TGUI_GLAD_API_CALL PFNGLDEBUGMESSAGECONTROLPROC tgui_glad_glDebugMessageControl;
#define glDebugMessageControl tgui_glad_glDebugMessageControl
TGUI_GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTPROC tgui_glad_glDebugMessageInsert;
#define glDebugMessageInsert tgui_glad_glDebugMessageInsert
TGUI_GLAD_API_CALL PFNGLDELETEBUFFERSPROC tgui_glad_glDeleteBuffers;
#define glDeleteBuffers tgui_glad_glDeleteBuffers
TGUI_GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC tgui_glad_glDeleteFramebuffers;
#define glDeleteFramebuffers tgui_glad_glDeleteFramebuffers
TGUI_GLAD_API_CALL PFNGLDELETEPROGRAMPROC tgui_glad_glDeleteProgram;
#define glDeleteProgram tgui_glad_glDeleteProgram
TGUI_GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC tgui_glad_glDeleteProgramPipelines;
#define glDeleteProgramPipelines tgui_glad_glDeleteProgramPipelines
TGUI_GLAD_API_CALL PFNGLDELETEQUERIESPROC tgui_glad_glDeleteQueries;
#define glDeleteQueries tgui_glad_glDeleteQueries
TGUI_GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC tgui_glad_glDeleteRenderbuffers;
#define glDeleteRenderbuffers tgui_glad_glDeleteRenderbuffers
TGUI_GLAD_API_CALL PFNGLDELETESAMPLERSPROC tgui_glad_glDeleteSamplers;
#define glDeleteSamplers tgui_glad_glDeleteSamplers
TGUI_GLAD_API_CALL PFNGLDELETESHADERPROC tgui_glad_glDeleteShader;
#define glDeleteShader tgui_glad_glDeleteShader
TGUI_GLAD_API_CALL PFNGLDELETESYNCPROC tgui_glad_glDeleteSync;
#define glDeleteSync tgui_glad_glDeleteSync
TGUI_GLAD_API_CALL PFNGLDELETETEXTURESPROC tgui_glad_glDeleteTextures;
#define glDeleteTextures tgui_glad_glDeleteTextures
TGUI_GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC tgui_glad_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks tgui_glad_glDeleteTransformFeedbacks
TGUI_GLAD_API_CALL PFNGLDELETEVERTEXARRAYSPROC tgui_glad_glDeleteVertexArrays;
#define glDeleteVertexArrays tgui_glad_glDeleteVertexArrays
TGUI_GLAD_API_CALL PFNGLDEPTHFUNCPROC tgui_glad_glDepthFunc;
#define glDepthFunc tgui_glad_glDepthFunc
TGUI_GLAD_API_CALL PFNGLDEPTHMASKPROC tgui_glad_glDepthMask;
#define glDepthMask tgui_glad_glDepthMask
TGUI_GLAD_API_CALL PFNGLDEPTHRANGEFPROC tgui_glad_glDepthRangef;
#define glDepthRangef tgui_glad_glDepthRangef
TGUI_GLAD_API_CALL PFNGLDETACHSHADERPROC tgui_glad_glDetachShader;
#define glDetachShader tgui_glad_glDetachShader
TGUI_GLAD_API_CALL PFNGLDISABLEPROC tgui_glad_glDisable;
#define glDisable tgui_glad_glDisable
TGUI_GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC tgui_glad_glDisableVertexAttribArray;
#define glDisableVertexAttribArray tgui_glad_glDisableVertexAttribArray
TGUI_GLAD_API_CALL PFNGLDISABLEIPROC tgui_glad_glDisablei;
#define glDisablei tgui_glad_glDisablei
TGUI_GLAD_API_CALL PFNGLDISPATCHCOMPUTEPROC tgui_glad_glDispatchCompute;
#define glDispatchCompute tgui_glad_glDispatchCompute
TGUI_GLAD_API_CALL PFNGLDISPATCHCOMPUTEINDIRECTPROC tgui_glad_glDispatchComputeIndirect;
#define glDispatchComputeIndirect tgui_glad_glDispatchComputeIndirect
TGUI_GLAD_API_CALL PFNGLDRAWARRAYSPROC tgui_glad_glDrawArrays;
#define glDrawArrays tgui_glad_glDrawArrays
TGUI_GLAD_API_CALL PFNGLDRAWARRAYSINDIRECTPROC tgui_glad_glDrawArraysIndirect;
#define glDrawArraysIndirect tgui_glad_glDrawArraysIndirect
TGUI_GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC tgui_glad_glDrawArraysInstanced;
#define glDrawArraysInstanced tgui_glad_glDrawArraysInstanced
TGUI_GLAD_API_CALL PFNGLDRAWBUFFERSPROC tgui_glad_glDrawBuffers;
#define glDrawBuffers tgui_glad_glDrawBuffers
TGUI_GLAD_API_CALL PFNGLDRAWELEMENTSPROC tgui_glad_glDrawElements;
#define glDrawElements tgui_glad_glDrawElements
TGUI_GLAD_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC tgui_glad_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex tgui_glad_glDrawElementsBaseVertex
TGUI_GLAD_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC tgui_glad_glDrawElementsIndirect;
#define glDrawElementsIndirect tgui_glad_glDrawElementsIndirect
TGUI_GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC tgui_glad_glDrawElementsInstanced;
#define glDrawElementsInstanced tgui_glad_glDrawElementsInstanced
TGUI_GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC tgui_glad_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex tgui_glad_glDrawElementsInstancedBaseVertex
TGUI_GLAD_API_CALL PFNGLDRAWRANGEELEMENTSPROC tgui_glad_glDrawRangeElements;
#define glDrawRangeElements tgui_glad_glDrawRangeElements
TGUI_GLAD_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC tgui_glad_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex tgui_glad_glDrawRangeElementsBaseVertex
TGUI_GLAD_API_CALL PFNGLENABLEPROC tgui_glad_glEnable;
#define glEnable tgui_glad_glEnable
TGUI_GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC tgui_glad_glEnableVertexAttribArray;
#define glEnableVertexAttribArray tgui_glad_glEnableVertexAttribArray
TGUI_GLAD_API_CALL PFNGLENABLEIPROC tgui_glad_glEnablei;
#define glEnablei tgui_glad_glEnablei
TGUI_GLAD_API_CALL PFNGLENDQUERYPROC tgui_glad_glEndQuery;
#define glEndQuery tgui_glad_glEndQuery
TGUI_GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC tgui_glad_glEndTransformFeedback;
#define glEndTransformFeedback tgui_glad_glEndTransformFeedback
TGUI_GLAD_API_CALL PFNGLFENCESYNCPROC tgui_glad_glFenceSync;
#define glFenceSync tgui_glad_glFenceSync
TGUI_GLAD_API_CALL PFNGLFINISHPROC tgui_glad_glFinish;
#define glFinish tgui_glad_glFinish
TGUI_GLAD_API_CALL PFNGLFLUSHPROC tgui_glad_glFlush;
#define glFlush tgui_glad_glFlush
TGUI_GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC tgui_glad_glFlushMappedBufferRange;
#define glFlushMappedBufferRange tgui_glad_glFlushMappedBufferRange
TGUI_GLAD_API_CALL PFNGLFRAMEBUFFERPARAMETERIPROC tgui_glad_glFramebufferParameteri;
#define glFramebufferParameteri tgui_glad_glFramebufferParameteri
TGUI_GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC tgui_glad_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer tgui_glad_glFramebufferRenderbuffer
TGUI_GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC tgui_glad_glFramebufferTexture;
#define glFramebufferTexture tgui_glad_glFramebufferTexture
TGUI_GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC tgui_glad_glFramebufferTexture2D;
#define glFramebufferTexture2D tgui_glad_glFramebufferTexture2D
TGUI_GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC tgui_glad_glFramebufferTextureLayer;
#define glFramebufferTextureLayer tgui_glad_glFramebufferTextureLayer
TGUI_GLAD_API_CALL PFNGLFRONTFACEPROC tgui_glad_glFrontFace;
#define glFrontFace tgui_glad_glFrontFace
TGUI_GLAD_API_CALL PFNGLGENBUFFERSPROC tgui_glad_glGenBuffers;
#define glGenBuffers tgui_glad_glGenBuffers
TGUI_GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC tgui_glad_glGenFramebuffers;
#define glGenFramebuffers tgui_glad_glGenFramebuffers
TGUI_GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC tgui_glad_glGenProgramPipelines;
#define glGenProgramPipelines tgui_glad_glGenProgramPipelines
TGUI_GLAD_API_CALL PFNGLGENQUERIESPROC tgui_glad_glGenQueries;
#define glGenQueries tgui_glad_glGenQueries
TGUI_GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC tgui_glad_glGenRenderbuffers;
#define glGenRenderbuffers tgui_glad_glGenRenderbuffers
TGUI_GLAD_API_CALL PFNGLGENSAMPLERSPROC tgui_glad_glGenSamplers;
#define glGenSamplers tgui_glad_glGenSamplers
TGUI_GLAD_API_CALL PFNGLGENTEXTURESPROC tgui_glad_glGenTextures;
#define glGenTextures tgui_glad_glGenTextures
TGUI_GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC tgui_glad_glGenTransformFeedbacks;
#define glGenTransformFeedbacks tgui_glad_glGenTransformFeedbacks
TGUI_GLAD_API_CALL PFNGLGENVERTEXARRAYSPROC tgui_glad_glGenVertexArrays;
#define glGenVertexArrays tgui_glad_glGenVertexArrays
TGUI_GLAD_API_CALL PFNGLGENERATEMIPMAPPROC tgui_glad_glGenerateMipmap;
#define glGenerateMipmap tgui_glad_glGenerateMipmap
TGUI_GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC tgui_glad_glGetActiveAttrib;
#define glGetActiveAttrib tgui_glad_glGetActiveAttrib
TGUI_GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC tgui_glad_glGetActiveUniform;
#define glGetActiveUniform tgui_glad_glGetActiveUniform
TGUI_GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC tgui_glad_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName tgui_glad_glGetActiveUniformBlockName
TGUI_GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC tgui_glad_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv tgui_glad_glGetActiveUniformBlockiv
TGUI_GLAD_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC tgui_glad_glGetActiveUniformsiv;
#define glGetActiveUniformsiv tgui_glad_glGetActiveUniformsiv
TGUI_GLAD_API_CALL PFNGLGETATTACHEDSHADERSPROC tgui_glad_glGetAttachedShaders;
#define glGetAttachedShaders tgui_glad_glGetAttachedShaders
TGUI_GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC tgui_glad_glGetAttribLocation;
#define glGetAttribLocation tgui_glad_glGetAttribLocation
TGUI_GLAD_API_CALL PFNGLGETBOOLEANI_VPROC tgui_glad_glGetBooleani_v;
#define glGetBooleani_v tgui_glad_glGetBooleani_v
TGUI_GLAD_API_CALL PFNGLGETBOOLEANVPROC tgui_glad_glGetBooleanv;
#define glGetBooleanv tgui_glad_glGetBooleanv
TGUI_GLAD_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC tgui_glad_glGetBufferParameteri64v;
#define glGetBufferParameteri64v tgui_glad_glGetBufferParameteri64v
TGUI_GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC tgui_glad_glGetBufferParameteriv;
#define glGetBufferParameteriv tgui_glad_glGetBufferParameteriv
TGUI_GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC tgui_glad_glGetBufferPointerv;
#define glGetBufferPointerv tgui_glad_glGetBufferPointerv
TGUI_GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGPROC tgui_glad_glGetDebugMessageLog;
#define glGetDebugMessageLog tgui_glad_glGetDebugMessageLog
TGUI_GLAD_API_CALL PFNGLGETERRORPROC tgui_glad_glGetError;
#define glGetError tgui_glad_glGetError
TGUI_GLAD_API_CALL PFNGLGETFLOATVPROC tgui_glad_glGetFloatv;
#define glGetFloatv tgui_glad_glGetFloatv
TGUI_GLAD_API_CALL PFNGLGETFRAGDATALOCATIONPROC tgui_glad_glGetFragDataLocation;
#define glGetFragDataLocation tgui_glad_glGetFragDataLocation
TGUI_GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC tgui_glad_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv tgui_glad_glGetFramebufferAttachmentParameteriv
TGUI_GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVPROC tgui_glad_glGetFramebufferParameteriv;
#define glGetFramebufferParameteriv tgui_glad_glGetFramebufferParameteriv
TGUI_GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSPROC tgui_glad_glGetGraphicsResetStatus;
#define glGetGraphicsResetStatus tgui_glad_glGetGraphicsResetStatus
TGUI_GLAD_API_CALL PFNGLGETINTEGER64I_VPROC tgui_glad_glGetInteger64i_v;
#define glGetInteger64i_v tgui_glad_glGetInteger64i_v
TGUI_GLAD_API_CALL PFNGLGETINTEGER64VPROC tgui_glad_glGetInteger64v;
#define glGetInteger64v tgui_glad_glGetInteger64v
TGUI_GLAD_API_CALL PFNGLGETINTEGERI_VPROC tgui_glad_glGetIntegeri_v;
#define glGetIntegeri_v tgui_glad_glGetIntegeri_v
TGUI_GLAD_API_CALL PFNGLGETINTEGERVPROC tgui_glad_glGetIntegerv;
#define glGetIntegerv tgui_glad_glGetIntegerv
TGUI_GLAD_API_CALL PFNGLGETINTERNALFORMATIVPROC tgui_glad_glGetInternalformativ;
#define glGetInternalformativ tgui_glad_glGetInternalformativ
TGUI_GLAD_API_CALL PFNGLGETMULTISAMPLEFVPROC tgui_glad_glGetMultisamplefv;
#define glGetMultisamplefv tgui_glad_glGetMultisamplefv
TGUI_GLAD_API_CALL PFNGLGETOBJECTLABELPROC tgui_glad_glGetObjectLabel;
#define glGetObjectLabel tgui_glad_glGetObjectLabel
TGUI_GLAD_API_CALL PFNGLGETOBJECTPTRLABELPROC tgui_glad_glGetObjectPtrLabel;
#define glGetObjectPtrLabel tgui_glad_glGetObjectPtrLabel
TGUI_GLAD_API_CALL PFNGLGETPOINTERVPROC tgui_glad_glGetPointerv;
#define glGetPointerv tgui_glad_glGetPointerv
TGUI_GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC tgui_glad_glGetProgramBinary;
#define glGetProgramBinary tgui_glad_glGetProgramBinary
TGUI_GLAD_API_CALL PFNGLGETPROGRAMINFOLOGPROC tgui_glad_glGetProgramInfoLog;
#define glGetProgramInfoLog tgui_glad_glGetProgramInfoLog
TGUI_GLAD_API_CALL PFNGLGETPROGRAMINTERFACEIVPROC tgui_glad_glGetProgramInterfaceiv;
#define glGetProgramInterfaceiv tgui_glad_glGetProgramInterfaceiv
TGUI_GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC tgui_glad_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog tgui_glad_glGetProgramPipelineInfoLog
TGUI_GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC tgui_glad_glGetProgramPipelineiv;
#define glGetProgramPipelineiv tgui_glad_glGetProgramPipelineiv
TGUI_GLAD_API_CALL PFNGLGETPROGRAMRESOURCEINDEXPROC tgui_glad_glGetProgramResourceIndex;
#define glGetProgramResourceIndex tgui_glad_glGetProgramResourceIndex
TGUI_GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONPROC tgui_glad_glGetProgramResourceLocation;
#define glGetProgramResourceLocation tgui_glad_glGetProgramResourceLocation
TGUI_GLAD_API_CALL PFNGLGETPROGRAMRESOURCENAMEPROC tgui_glad_glGetProgramResourceName;
#define glGetProgramResourceName tgui_glad_glGetProgramResourceName
TGUI_GLAD_API_CALL PFNGLGETPROGRAMRESOURCEIVPROC tgui_glad_glGetProgramResourceiv;
#define glGetProgramResourceiv tgui_glad_glGetProgramResourceiv
TGUI_GLAD_API_CALL PFNGLGETPROGRAMIVPROC tgui_glad_glGetProgramiv;
#define glGetProgramiv tgui_glad_glGetProgramiv
TGUI_GLAD_API_CALL PFNGLGETQUERYOBJECTUIVPROC tgui_glad_glGetQueryObjectuiv;
#define glGetQueryObjectuiv tgui_glad_glGetQueryObjectuiv
TGUI_GLAD_API_CALL PFNGLGETQUERYIVPROC tgui_glad_glGetQueryiv;
#define glGetQueryiv tgui_glad_glGetQueryiv
TGUI_GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC tgui_glad_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv tgui_glad_glGetRenderbufferParameteriv
TGUI_GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC tgui_glad_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv tgui_glad_glGetSamplerParameterIiv
TGUI_GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC tgui_glad_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv tgui_glad_glGetSamplerParameterIuiv
TGUI_GLAD_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC tgui_glad_glGetSamplerParameterfv;
#define glGetSamplerParameterfv tgui_glad_glGetSamplerParameterfv
TGUI_GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC tgui_glad_glGetSamplerParameteriv;
#define glGetSamplerParameteriv tgui_glad_glGetSamplerParameteriv
TGUI_GLAD_API_CALL PFNGLGETSHADERINFOLOGPROC tgui_glad_glGetShaderInfoLog;
#define glGetShaderInfoLog tgui_glad_glGetShaderInfoLog
TGUI_GLAD_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC tgui_glad_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat tgui_glad_glGetShaderPrecisionFormat
TGUI_GLAD_API_CALL PFNGLGETSHADERSOURCEPROC tgui_glad_glGetShaderSource;
#define glGetShaderSource tgui_glad_glGetShaderSource
TGUI_GLAD_API_CALL PFNGLGETSHADERIVPROC tgui_glad_glGetShaderiv;
#define glGetShaderiv tgui_glad_glGetShaderiv
TGUI_GLAD_API_CALL PFNGLGETSTRINGPROC tgui_glad_glGetString;
#define glGetString tgui_glad_glGetString
TGUI_GLAD_API_CALL PFNGLGETSTRINGIPROC tgui_glad_glGetStringi;
#define glGetStringi tgui_glad_glGetStringi
TGUI_GLAD_API_CALL PFNGLGETSYNCIVPROC tgui_glad_glGetSynciv;
#define glGetSynciv tgui_glad_glGetSynciv
TGUI_GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC tgui_glad_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv tgui_glad_glGetTexLevelParameterfv
TGUI_GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC tgui_glad_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv tgui_glad_glGetTexLevelParameteriv
TGUI_GLAD_API_CALL PFNGLGETTEXPARAMETERIIVPROC tgui_glad_glGetTexParameterIiv;
#define glGetTexParameterIiv tgui_glad_glGetTexParameterIiv
TGUI_GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVPROC tgui_glad_glGetTexParameterIuiv;
#define glGetTexParameterIuiv tgui_glad_glGetTexParameterIuiv
TGUI_GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC tgui_glad_glGetTexParameterfv;
#define glGetTexParameterfv tgui_glad_glGetTexParameterfv
TGUI_GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC tgui_glad_glGetTexParameteriv;
#define glGetTexParameteriv tgui_glad_glGetTexParameteriv
TGUI_GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC tgui_glad_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying tgui_glad_glGetTransformFeedbackVarying
TGUI_GLAD_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC tgui_glad_glGetUniformBlockIndex;
#define glGetUniformBlockIndex tgui_glad_glGetUniformBlockIndex
TGUI_GLAD_API_CALL PFNGLGETUNIFORMINDICESPROC tgui_glad_glGetUniformIndices;
#define glGetUniformIndices tgui_glad_glGetUniformIndices
TGUI_GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC tgui_glad_glGetUniformLocation;
#define glGetUniformLocation tgui_glad_glGetUniformLocation
TGUI_GLAD_API_CALL PFNGLGETUNIFORMFVPROC tgui_glad_glGetUniformfv;
#define glGetUniformfv tgui_glad_glGetUniformfv
TGUI_GLAD_API_CALL PFNGLGETUNIFORMIVPROC tgui_glad_glGetUniformiv;
#define glGetUniformiv tgui_glad_glGetUniformiv
TGUI_GLAD_API_CALL PFNGLGETUNIFORMUIVPROC tgui_glad_glGetUniformuiv;
#define glGetUniformuiv tgui_glad_glGetUniformuiv
TGUI_GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVPROC tgui_glad_glGetVertexAttribIiv;
#define glGetVertexAttribIiv tgui_glad_glGetVertexAttribIiv
TGUI_GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC tgui_glad_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv tgui_glad_glGetVertexAttribIuiv
TGUI_GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC tgui_glad_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv tgui_glad_glGetVertexAttribPointerv
TGUI_GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC tgui_glad_glGetVertexAttribfv;
#define glGetVertexAttribfv tgui_glad_glGetVertexAttribfv
TGUI_GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC tgui_glad_glGetVertexAttribiv;
#define glGetVertexAttribiv tgui_glad_glGetVertexAttribiv
TGUI_GLAD_API_CALL PFNGLGETNUNIFORMFVPROC tgui_glad_glGetnUniformfv;
#define glGetnUniformfv tgui_glad_glGetnUniformfv
TGUI_GLAD_API_CALL PFNGLGETNUNIFORMIVPROC tgui_glad_glGetnUniformiv;
#define glGetnUniformiv tgui_glad_glGetnUniformiv
TGUI_GLAD_API_CALL PFNGLGETNUNIFORMUIVPROC tgui_glad_glGetnUniformuiv;
#define glGetnUniformuiv tgui_glad_glGetnUniformuiv
TGUI_GLAD_API_CALL PFNGLHINTPROC tgui_glad_glHint;
#define glHint tgui_glad_glHint
TGUI_GLAD_API_CALL PFNGLINVALIDATEFRAMEBUFFERPROC tgui_glad_glInvalidateFramebuffer;
#define glInvalidateFramebuffer tgui_glad_glInvalidateFramebuffer
TGUI_GLAD_API_CALL PFNGLINVALIDATESUBFRAMEBUFFERPROC tgui_glad_glInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer tgui_glad_glInvalidateSubFramebuffer
TGUI_GLAD_API_CALL PFNGLISBUFFERPROC tgui_glad_glIsBuffer;
#define glIsBuffer tgui_glad_glIsBuffer
TGUI_GLAD_API_CALL PFNGLISENABLEDPROC tgui_glad_glIsEnabled;
#define glIsEnabled tgui_glad_glIsEnabled
TGUI_GLAD_API_CALL PFNGLISENABLEDIPROC tgui_glad_glIsEnabledi;
#define glIsEnabledi tgui_glad_glIsEnabledi
TGUI_GLAD_API_CALL PFNGLISFRAMEBUFFERPROC tgui_glad_glIsFramebuffer;
#define glIsFramebuffer tgui_glad_glIsFramebuffer
TGUI_GLAD_API_CALL PFNGLISPROGRAMPROC tgui_glad_glIsProgram;
#define glIsProgram tgui_glad_glIsProgram
TGUI_GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC tgui_glad_glIsProgramPipeline;
#define glIsProgramPipeline tgui_glad_glIsProgramPipeline
TGUI_GLAD_API_CALL PFNGLISQUERYPROC tgui_glad_glIsQuery;
#define glIsQuery tgui_glad_glIsQuery
TGUI_GLAD_API_CALL PFNGLISRENDERBUFFERPROC tgui_glad_glIsRenderbuffer;
#define glIsRenderbuffer tgui_glad_glIsRenderbuffer
TGUI_GLAD_API_CALL PFNGLISSAMPLERPROC tgui_glad_glIsSampler;
#define glIsSampler tgui_glad_glIsSampler
TGUI_GLAD_API_CALL PFNGLISSHADERPROC tgui_glad_glIsShader;
#define glIsShader tgui_glad_glIsShader
TGUI_GLAD_API_CALL PFNGLISSYNCPROC tgui_glad_glIsSync;
#define glIsSync tgui_glad_glIsSync
TGUI_GLAD_API_CALL PFNGLISTEXTUREPROC tgui_glad_glIsTexture;
#define glIsTexture tgui_glad_glIsTexture
TGUI_GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKPROC tgui_glad_glIsTransformFeedback;
#define glIsTransformFeedback tgui_glad_glIsTransformFeedback
TGUI_GLAD_API_CALL PFNGLISVERTEXARRAYPROC tgui_glad_glIsVertexArray;
#define glIsVertexArray tgui_glad_glIsVertexArray
TGUI_GLAD_API_CALL PFNGLLINEWIDTHPROC tgui_glad_glLineWidth;
#define glLineWidth tgui_glad_glLineWidth
TGUI_GLAD_API_CALL PFNGLLINKPROGRAMPROC tgui_glad_glLinkProgram;
#define glLinkProgram tgui_glad_glLinkProgram
TGUI_GLAD_API_CALL PFNGLMAPBUFFERRANGEPROC tgui_glad_glMapBufferRange;
#define glMapBufferRange tgui_glad_glMapBufferRange
TGUI_GLAD_API_CALL PFNGLMEMORYBARRIERPROC tgui_glad_glMemoryBarrier;
#define glMemoryBarrier tgui_glad_glMemoryBarrier
TGUI_GLAD_API_CALL PFNGLMEMORYBARRIERBYREGIONPROC tgui_glad_glMemoryBarrierByRegion;
#define glMemoryBarrierByRegion tgui_glad_glMemoryBarrierByRegion
TGUI_GLAD_API_CALL PFNGLMINSAMPLESHADINGPROC tgui_glad_glMinSampleShading;
#define glMinSampleShading tgui_glad_glMinSampleShading
TGUI_GLAD_API_CALL PFNGLOBJECTLABELPROC tgui_glad_glObjectLabel;
#define glObjectLabel tgui_glad_glObjectLabel
TGUI_GLAD_API_CALL PFNGLOBJECTPTRLABELPROC tgui_glad_glObjectPtrLabel;
#define glObjectPtrLabel tgui_glad_glObjectPtrLabel
TGUI_GLAD_API_CALL PFNGLPATCHPARAMETERIPROC tgui_glad_glPatchParameteri;
#define glPatchParameteri tgui_glad_glPatchParameteri
TGUI_GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC tgui_glad_glPauseTransformFeedback;
#define glPauseTransformFeedback tgui_glad_glPauseTransformFeedback
TGUI_GLAD_API_CALL PFNGLPIXELSTOREIPROC tgui_glad_glPixelStorei;
#define glPixelStorei tgui_glad_glPixelStorei
TGUI_GLAD_API_CALL PFNGLPOLYGONOFFSETPROC tgui_glad_glPolygonOffset;
#define glPolygonOffset tgui_glad_glPolygonOffset
TGUI_GLAD_API_CALL PFNGLPOPDEBUGGROUPPROC tgui_glad_glPopDebugGroup;
#define glPopDebugGroup tgui_glad_glPopDebugGroup
TGUI_GLAD_API_CALL PFNGLPRIMITIVEBOUNDINGBOXPROC tgui_glad_glPrimitiveBoundingBox;
#define glPrimitiveBoundingBox tgui_glad_glPrimitiveBoundingBox
TGUI_GLAD_API_CALL PFNGLPROGRAMBINARYPROC tgui_glad_glProgramBinary;
#define glProgramBinary tgui_glad_glProgramBinary
TGUI_GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC tgui_glad_glProgramParameteri;
#define glProgramParameteri tgui_glad_glProgramParameteri
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC tgui_glad_glProgramUniform1f;
#define glProgramUniform1f tgui_glad_glProgramUniform1f
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC tgui_glad_glProgramUniform1fv;
#define glProgramUniform1fv tgui_glad_glProgramUniform1fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC tgui_glad_glProgramUniform1i;
#define glProgramUniform1i tgui_glad_glProgramUniform1i
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC tgui_glad_glProgramUniform1iv;
#define glProgramUniform1iv tgui_glad_glProgramUniform1iv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC tgui_glad_glProgramUniform1ui;
#define glProgramUniform1ui tgui_glad_glProgramUniform1ui
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC tgui_glad_glProgramUniform1uiv;
#define glProgramUniform1uiv tgui_glad_glProgramUniform1uiv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC tgui_glad_glProgramUniform2f;
#define glProgramUniform2f tgui_glad_glProgramUniform2f
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC tgui_glad_glProgramUniform2fv;
#define glProgramUniform2fv tgui_glad_glProgramUniform2fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC tgui_glad_glProgramUniform2i;
#define glProgramUniform2i tgui_glad_glProgramUniform2i
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC tgui_glad_glProgramUniform2iv;
#define glProgramUniform2iv tgui_glad_glProgramUniform2iv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC tgui_glad_glProgramUniform2ui;
#define glProgramUniform2ui tgui_glad_glProgramUniform2ui
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC tgui_glad_glProgramUniform2uiv;
#define glProgramUniform2uiv tgui_glad_glProgramUniform2uiv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC tgui_glad_glProgramUniform3f;
#define glProgramUniform3f tgui_glad_glProgramUniform3f
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC tgui_glad_glProgramUniform3fv;
#define glProgramUniform3fv tgui_glad_glProgramUniform3fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC tgui_glad_glProgramUniform3i;
#define glProgramUniform3i tgui_glad_glProgramUniform3i
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC tgui_glad_glProgramUniform3iv;
#define glProgramUniform3iv tgui_glad_glProgramUniform3iv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC tgui_glad_glProgramUniform3ui;
#define glProgramUniform3ui tgui_glad_glProgramUniform3ui
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC tgui_glad_glProgramUniform3uiv;
#define glProgramUniform3uiv tgui_glad_glProgramUniform3uiv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC tgui_glad_glProgramUniform4f;
#define glProgramUniform4f tgui_glad_glProgramUniform4f
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC tgui_glad_glProgramUniform4fv;
#define glProgramUniform4fv tgui_glad_glProgramUniform4fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC tgui_glad_glProgramUniform4i;
#define glProgramUniform4i tgui_glad_glProgramUniform4i
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC tgui_glad_glProgramUniform4iv;
#define glProgramUniform4iv tgui_glad_glProgramUniform4iv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC tgui_glad_glProgramUniform4ui;
#define glProgramUniform4ui tgui_glad_glProgramUniform4ui
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC tgui_glad_glProgramUniform4uiv;
#define glProgramUniform4uiv tgui_glad_glProgramUniform4uiv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC tgui_glad_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv tgui_glad_glProgramUniformMatrix2fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC tgui_glad_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv tgui_glad_glProgramUniformMatrix2x3fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC tgui_glad_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv tgui_glad_glProgramUniformMatrix2x4fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC tgui_glad_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv tgui_glad_glProgramUniformMatrix3fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC tgui_glad_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv tgui_glad_glProgramUniformMatrix3x2fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC tgui_glad_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv tgui_glad_glProgramUniformMatrix3x4fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC tgui_glad_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv tgui_glad_glProgramUniformMatrix4fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC tgui_glad_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv tgui_glad_glProgramUniformMatrix4x2fv
TGUI_GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC tgui_glad_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv tgui_glad_glProgramUniformMatrix4x3fv
TGUI_GLAD_API_CALL PFNGLPUSHDEBUGGROUPPROC tgui_glad_glPushDebugGroup;
#define glPushDebugGroup tgui_glad_glPushDebugGroup
TGUI_GLAD_API_CALL PFNGLREADBUFFERPROC tgui_glad_glReadBuffer;
#define glReadBuffer tgui_glad_glReadBuffer
TGUI_GLAD_API_CALL PFNGLREADPIXELSPROC tgui_glad_glReadPixels;
#define glReadPixels tgui_glad_glReadPixels
TGUI_GLAD_API_CALL PFNGLREADNPIXELSPROC tgui_glad_glReadnPixels;
#define glReadnPixels tgui_glad_glReadnPixels
TGUI_GLAD_API_CALL PFNGLRELEASESHADERCOMPILERPROC tgui_glad_glReleaseShaderCompiler;
#define glReleaseShaderCompiler tgui_glad_glReleaseShaderCompiler
TGUI_GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC tgui_glad_glRenderbufferStorage;
#define glRenderbufferStorage tgui_glad_glRenderbufferStorage
TGUI_GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC tgui_glad_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample tgui_glad_glRenderbufferStorageMultisample
TGUI_GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC tgui_glad_glResumeTransformFeedback;
#define glResumeTransformFeedback tgui_glad_glResumeTransformFeedback
TGUI_GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC tgui_glad_glSampleCoverage;
#define glSampleCoverage tgui_glad_glSampleCoverage
TGUI_GLAD_API_CALL PFNGLSAMPLEMASKIPROC tgui_glad_glSampleMaski;
#define glSampleMaski tgui_glad_glSampleMaski
TGUI_GLAD_API_CALL PFNGLSAMPLERPARAMETERIIVPROC tgui_glad_glSamplerParameterIiv;
#define glSamplerParameterIiv tgui_glad_glSamplerParameterIiv
TGUI_GLAD_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC tgui_glad_glSamplerParameterIuiv;
#define glSamplerParameterIuiv tgui_glad_glSamplerParameterIuiv
TGUI_GLAD_API_CALL PFNGLSAMPLERPARAMETERFPROC tgui_glad_glSamplerParameterf;
#define glSamplerParameterf tgui_glad_glSamplerParameterf
TGUI_GLAD_API_CALL PFNGLSAMPLERPARAMETERFVPROC tgui_glad_glSamplerParameterfv;
#define glSamplerParameterfv tgui_glad_glSamplerParameterfv
TGUI_GLAD_API_CALL PFNGLSAMPLERPARAMETERIPROC tgui_glad_glSamplerParameteri;
#define glSamplerParameteri tgui_glad_glSamplerParameteri
TGUI_GLAD_API_CALL PFNGLSAMPLERPARAMETERIVPROC tgui_glad_glSamplerParameteriv;
#define glSamplerParameteriv tgui_glad_glSamplerParameteriv
TGUI_GLAD_API_CALL PFNGLSCISSORPROC tgui_glad_glScissor;
#define glScissor tgui_glad_glScissor
TGUI_GLAD_API_CALL PFNGLSHADERBINARYPROC tgui_glad_glShaderBinary;
#define glShaderBinary tgui_glad_glShaderBinary
TGUI_GLAD_API_CALL PFNGLSHADERSOURCEPROC tgui_glad_glShaderSource;
#define glShaderSource tgui_glad_glShaderSource
TGUI_GLAD_API_CALL PFNGLSTENCILFUNCPROC tgui_glad_glStencilFunc;
#define glStencilFunc tgui_glad_glStencilFunc
TGUI_GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEPROC tgui_glad_glStencilFuncSeparate;
#define glStencilFuncSeparate tgui_glad_glStencilFuncSeparate
TGUI_GLAD_API_CALL PFNGLSTENCILMASKPROC tgui_glad_glStencilMask;
#define glStencilMask tgui_glad_glStencilMask
TGUI_GLAD_API_CALL PFNGLSTENCILMASKSEPARATEPROC tgui_glad_glStencilMaskSeparate;
#define glStencilMaskSeparate tgui_glad_glStencilMaskSeparate
TGUI_GLAD_API_CALL PFNGLSTENCILOPPROC tgui_glad_glStencilOp;
#define glStencilOp tgui_glad_glStencilOp
TGUI_GLAD_API_CALL PFNGLSTENCILOPSEPARATEPROC tgui_glad_glStencilOpSeparate;
#define glStencilOpSeparate tgui_glad_glStencilOpSeparate
TGUI_GLAD_API_CALL PFNGLTEXBUFFERPROC tgui_glad_glTexBuffer;
#define glTexBuffer tgui_glad_glTexBuffer
TGUI_GLAD_API_CALL PFNGLTEXBUFFERRANGEPROC tgui_glad_glTexBufferRange;
#define glTexBufferRange tgui_glad_glTexBufferRange
TGUI_GLAD_API_CALL PFNGLTEXIMAGE2DPROC tgui_glad_glTexImage2D;
#define glTexImage2D tgui_glad_glTexImage2D
TGUI_GLAD_API_CALL PFNGLTEXIMAGE3DPROC tgui_glad_glTexImage3D;
#define glTexImage3D tgui_glad_glTexImage3D
TGUI_GLAD_API_CALL PFNGLTEXPARAMETERIIVPROC tgui_glad_glTexParameterIiv;
#define glTexParameterIiv tgui_glad_glTexParameterIiv
TGUI_GLAD_API_CALL PFNGLTEXPARAMETERIUIVPROC tgui_glad_glTexParameterIuiv;
#define glTexParameterIuiv tgui_glad_glTexParameterIuiv
TGUI_GLAD_API_CALL PFNGLTEXPARAMETERFPROC tgui_glad_glTexParameterf;
#define glTexParameterf tgui_glad_glTexParameterf
TGUI_GLAD_API_CALL PFNGLTEXPARAMETERFVPROC tgui_glad_glTexParameterfv;
#define glTexParameterfv tgui_glad_glTexParameterfv
TGUI_GLAD_API_CALL PFNGLTEXPARAMETERIPROC tgui_glad_glTexParameteri;
#define glTexParameteri tgui_glad_glTexParameteri
TGUI_GLAD_API_CALL PFNGLTEXPARAMETERIVPROC tgui_glad_glTexParameteriv;
#define glTexParameteriv tgui_glad_glTexParameteriv
TGUI_GLAD_API_CALL PFNGLTEXSTORAGE2DPROC tgui_glad_glTexStorage2D;
#define glTexStorage2D tgui_glad_glTexStorage2D
TGUI_GLAD_API_CALL PFNGLTEXSTORAGE2DMULTISAMPLEPROC tgui_glad_glTexStorage2DMultisample;
#define glTexStorage2DMultisample tgui_glad_glTexStorage2DMultisample
TGUI_GLAD_API_CALL PFNGLTEXSTORAGE3DPROC tgui_glad_glTexStorage3D;
#define glTexStorage3D tgui_glad_glTexStorage3D
TGUI_GLAD_API_CALL PFNGLTEXSTORAGE3DMULTISAMPLEPROC tgui_glad_glTexStorage3DMultisample;
#define glTexStorage3DMultisample tgui_glad_glTexStorage3DMultisample
TGUI_GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC tgui_glad_glTexSubImage2D;
#define glTexSubImage2D tgui_glad_glTexSubImage2D
TGUI_GLAD_API_CALL PFNGLTEXSUBIMAGE3DPROC tgui_glad_glTexSubImage3D;
#define glTexSubImage3D tgui_glad_glTexSubImage3D
TGUI_GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC tgui_glad_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings tgui_glad_glTransformFeedbackVaryings
TGUI_GLAD_API_CALL PFNGLUNIFORM1FPROC tgui_glad_glUniform1f;
#define glUniform1f tgui_glad_glUniform1f
TGUI_GLAD_API_CALL PFNGLUNIFORM1FVPROC tgui_glad_glUniform1fv;
#define glUniform1fv tgui_glad_glUniform1fv
TGUI_GLAD_API_CALL PFNGLUNIFORM1IPROC tgui_glad_glUniform1i;
#define glUniform1i tgui_glad_glUniform1i
TGUI_GLAD_API_CALL PFNGLUNIFORM1IVPROC tgui_glad_glUniform1iv;
#define glUniform1iv tgui_glad_glUniform1iv
TGUI_GLAD_API_CALL PFNGLUNIFORM1UIPROC tgui_glad_glUniform1ui;
#define glUniform1ui tgui_glad_glUniform1ui
TGUI_GLAD_API_CALL PFNGLUNIFORM1UIVPROC tgui_glad_glUniform1uiv;
#define glUniform1uiv tgui_glad_glUniform1uiv
TGUI_GLAD_API_CALL PFNGLUNIFORM2FPROC tgui_glad_glUniform2f;
#define glUniform2f tgui_glad_glUniform2f
TGUI_GLAD_API_CALL PFNGLUNIFORM2FVPROC tgui_glad_glUniform2fv;
#define glUniform2fv tgui_glad_glUniform2fv
TGUI_GLAD_API_CALL PFNGLUNIFORM2IPROC tgui_glad_glUniform2i;
#define glUniform2i tgui_glad_glUniform2i
TGUI_GLAD_API_CALL PFNGLUNIFORM2IVPROC tgui_glad_glUniform2iv;
#define glUniform2iv tgui_glad_glUniform2iv
TGUI_GLAD_API_CALL PFNGLUNIFORM2UIPROC tgui_glad_glUniform2ui;
#define glUniform2ui tgui_glad_glUniform2ui
TGUI_GLAD_API_CALL PFNGLUNIFORM2UIVPROC tgui_glad_glUniform2uiv;
#define glUniform2uiv tgui_glad_glUniform2uiv
TGUI_GLAD_API_CALL PFNGLUNIFORM3FPROC tgui_glad_glUniform3f;
#define glUniform3f tgui_glad_glUniform3f
TGUI_GLAD_API_CALL PFNGLUNIFORM3FVPROC tgui_glad_glUniform3fv;
#define glUniform3fv tgui_glad_glUniform3fv
TGUI_GLAD_API_CALL PFNGLUNIFORM3IPROC tgui_glad_glUniform3i;
#define glUniform3i tgui_glad_glUniform3i
TGUI_GLAD_API_CALL PFNGLUNIFORM3IVPROC tgui_glad_glUniform3iv;
#define glUniform3iv tgui_glad_glUniform3iv
TGUI_GLAD_API_CALL PFNGLUNIFORM3UIPROC tgui_glad_glUniform3ui;
#define glUniform3ui tgui_glad_glUniform3ui
TGUI_GLAD_API_CALL PFNGLUNIFORM3UIVPROC tgui_glad_glUniform3uiv;
#define glUniform3uiv tgui_glad_glUniform3uiv
TGUI_GLAD_API_CALL PFNGLUNIFORM4FPROC tgui_glad_glUniform4f;
#define glUniform4f tgui_glad_glUniform4f
TGUI_GLAD_API_CALL PFNGLUNIFORM4FVPROC tgui_glad_glUniform4fv;
#define glUniform4fv tgui_glad_glUniform4fv
TGUI_GLAD_API_CALL PFNGLUNIFORM4IPROC tgui_glad_glUniform4i;
#define glUniform4i tgui_glad_glUniform4i
TGUI_GLAD_API_CALL PFNGLUNIFORM4IVPROC tgui_glad_glUniform4iv;
#define glUniform4iv tgui_glad_glUniform4iv
TGUI_GLAD_API_CALL PFNGLUNIFORM4UIPROC tgui_glad_glUniform4ui;
#define glUniform4ui tgui_glad_glUniform4ui
TGUI_GLAD_API_CALL PFNGLUNIFORM4UIVPROC tgui_glad_glUniform4uiv;
#define glUniform4uiv tgui_glad_glUniform4uiv
TGUI_GLAD_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC tgui_glad_glUniformBlockBinding;
#define glUniformBlockBinding tgui_glad_glUniformBlockBinding
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC tgui_glad_glUniformMatrix2fv;
#define glUniformMatrix2fv tgui_glad_glUniformMatrix2fv
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC tgui_glad_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv tgui_glad_glUniformMatrix2x3fv
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC tgui_glad_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv tgui_glad_glUniformMatrix2x4fv
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC tgui_glad_glUniformMatrix3fv;
#define glUniformMatrix3fv tgui_glad_glUniformMatrix3fv
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC tgui_glad_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv tgui_glad_glUniformMatrix3x2fv
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC tgui_glad_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv tgui_glad_glUniformMatrix3x4fv
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC tgui_glad_glUniformMatrix4fv;
#define glUniformMatrix4fv tgui_glad_glUniformMatrix4fv
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC tgui_glad_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv tgui_glad_glUniformMatrix4x2fv
TGUI_GLAD_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC tgui_glad_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv tgui_glad_glUniformMatrix4x3fv
TGUI_GLAD_API_CALL PFNGLUNMAPBUFFERPROC tgui_glad_glUnmapBuffer;
#define glUnmapBuffer tgui_glad_glUnmapBuffer
TGUI_GLAD_API_CALL PFNGLUSEPROGRAMPROC tgui_glad_glUseProgram;
#define glUseProgram tgui_glad_glUseProgram
TGUI_GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC tgui_glad_glUseProgramStages;
#define glUseProgramStages tgui_glad_glUseProgramStages
TGUI_GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC tgui_glad_glValidateProgram;
#define glValidateProgram tgui_glad_glValidateProgram
TGUI_GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC tgui_glad_glValidateProgramPipeline;
#define glValidateProgramPipeline tgui_glad_glValidateProgramPipeline
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC tgui_glad_glVertexAttrib1f;
#define glVertexAttrib1f tgui_glad_glVertexAttrib1f
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC tgui_glad_glVertexAttrib1fv;
#define glVertexAttrib1fv tgui_glad_glVertexAttrib1fv
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC tgui_glad_glVertexAttrib2f;
#define glVertexAttrib2f tgui_glad_glVertexAttrib2f
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC tgui_glad_glVertexAttrib2fv;
#define glVertexAttrib2fv tgui_glad_glVertexAttrib2fv
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC tgui_glad_glVertexAttrib3f;
#define glVertexAttrib3f tgui_glad_glVertexAttrib3f
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC tgui_glad_glVertexAttrib3fv;
#define glVertexAttrib3fv tgui_glad_glVertexAttrib3fv
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC tgui_glad_glVertexAttrib4f;
#define glVertexAttrib4f tgui_glad_glVertexAttrib4f
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC tgui_glad_glVertexAttrib4fv;
#define glVertexAttrib4fv tgui_glad_glVertexAttrib4fv
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBBINDINGPROC tgui_glad_glVertexAttribBinding;
#define glVertexAttribBinding tgui_glad_glVertexAttribBinding
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORPROC tgui_glad_glVertexAttribDivisor;
#define glVertexAttribDivisor tgui_glad_glVertexAttribDivisor
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBFORMATPROC tgui_glad_glVertexAttribFormat;
#define glVertexAttribFormat tgui_glad_glVertexAttribFormat
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBI4IPROC tgui_glad_glVertexAttribI4i;
#define glVertexAttribI4i tgui_glad_glVertexAttribI4i
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBI4IVPROC tgui_glad_glVertexAttribI4iv;
#define glVertexAttribI4iv tgui_glad_glVertexAttribI4iv
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBI4UIPROC tgui_glad_glVertexAttribI4ui;
#define glVertexAttribI4ui tgui_glad_glVertexAttribI4ui
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVPROC tgui_glad_glVertexAttribI4uiv;
#define glVertexAttribI4uiv tgui_glad_glVertexAttribI4uiv
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBIFORMATPROC tgui_glad_glVertexAttribIFormat;
#define glVertexAttribIFormat tgui_glad_glVertexAttribIFormat
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC tgui_glad_glVertexAttribIPointer;
#define glVertexAttribIPointer tgui_glad_glVertexAttribIPointer
TGUI_GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC tgui_glad_glVertexAttribPointer;
#define glVertexAttribPointer tgui_glad_glVertexAttribPointer
TGUI_GLAD_API_CALL PFNGLVERTEXBINDINGDIVISORPROC tgui_glad_glVertexBindingDivisor;
#define glVertexBindingDivisor tgui_glad_glVertexBindingDivisor
TGUI_GLAD_API_CALL PFNGLVIEWPORTPROC tgui_glad_glViewport;
#define glViewport tgui_glad_glViewport
TGUI_GLAD_API_CALL PFNGLWAITSYNCPROC tgui_glad_glWaitSync;
#define glWaitSync tgui_glad_glWaitSync





TGUI_GLAD_API_CALL int tgui_gladLoadGLES2UserPtr( TGUI_GLADuserptrloadfunc load, void *userptr);
TGUI_GLAD_API_CALL int tgui_gladLoadGLES2( TGUI_GLADloadfunc load);



#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef TGUI_GLAD_GLES2_IMPLEMENTATION
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef TGUI_GLAD_IMPL_UTIL_C_
#define TGUI_GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define TGUI_GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define TGUI_GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* TGUI_GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif



int TGUI_GLAD_GL_ES_VERSION_2_0 = 0;
int TGUI_GLAD_GL_ES_VERSION_3_0 = 0;
int TGUI_GLAD_GL_ES_VERSION_3_1 = 0;
int TGUI_GLAD_GL_ES_VERSION_3_2 = 0;



PFNGLACTIVESHADERPROGRAMPROC tgui_glad_glActiveShaderProgram = NULL;
PFNGLACTIVETEXTUREPROC tgui_glad_glActiveTexture = NULL;
PFNGLATTACHSHADERPROC tgui_glad_glAttachShader = NULL;
PFNGLBEGINQUERYPROC tgui_glad_glBeginQuery = NULL;
PFNGLBEGINTRANSFORMFEEDBACKPROC tgui_glad_glBeginTransformFeedback = NULL;
PFNGLBINDATTRIBLOCATIONPROC tgui_glad_glBindAttribLocation = NULL;
PFNGLBINDBUFFERPROC tgui_glad_glBindBuffer = NULL;
PFNGLBINDBUFFERBASEPROC tgui_glad_glBindBufferBase = NULL;
PFNGLBINDBUFFERRANGEPROC tgui_glad_glBindBufferRange = NULL;
PFNGLBINDFRAMEBUFFERPROC tgui_glad_glBindFramebuffer = NULL;
PFNGLBINDIMAGETEXTUREPROC tgui_glad_glBindImageTexture = NULL;
PFNGLBINDPROGRAMPIPELINEPROC tgui_glad_glBindProgramPipeline = NULL;
PFNGLBINDRENDERBUFFERPROC tgui_glad_glBindRenderbuffer = NULL;
PFNGLBINDSAMPLERPROC tgui_glad_glBindSampler = NULL;
PFNGLBINDTEXTUREPROC tgui_glad_glBindTexture = NULL;
PFNGLBINDTRANSFORMFEEDBACKPROC tgui_glad_glBindTransformFeedback = NULL;
PFNGLBINDVERTEXARRAYPROC tgui_glad_glBindVertexArray = NULL;
PFNGLBINDVERTEXBUFFERPROC tgui_glad_glBindVertexBuffer = NULL;
PFNGLBLENDBARRIERPROC tgui_glad_glBlendBarrier = NULL;
PFNGLBLENDCOLORPROC tgui_glad_glBlendColor = NULL;
PFNGLBLENDEQUATIONPROC tgui_glad_glBlendEquation = NULL;
PFNGLBLENDEQUATIONSEPARATEPROC tgui_glad_glBlendEquationSeparate = NULL;
PFNGLBLENDEQUATIONSEPARATEIPROC tgui_glad_glBlendEquationSeparatei = NULL;
PFNGLBLENDEQUATIONIPROC tgui_glad_glBlendEquationi = NULL;
PFNGLBLENDFUNCPROC tgui_glad_glBlendFunc = NULL;
PFNGLBLENDFUNCSEPARATEPROC tgui_glad_glBlendFuncSeparate = NULL;
PFNGLBLENDFUNCSEPARATEIPROC tgui_glad_glBlendFuncSeparatei = NULL;
PFNGLBLENDFUNCIPROC tgui_glad_glBlendFunci = NULL;
PFNGLBLITFRAMEBUFFERPROC tgui_glad_glBlitFramebuffer = NULL;
PFNGLBUFFERDATAPROC tgui_glad_glBufferData = NULL;
PFNGLBUFFERSUBDATAPROC tgui_glad_glBufferSubData = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSPROC tgui_glad_glCheckFramebufferStatus = NULL;
PFNGLCLEARPROC tgui_glad_glClear = NULL;
PFNGLCLEARBUFFERFIPROC tgui_glad_glClearBufferfi = NULL;
PFNGLCLEARBUFFERFVPROC tgui_glad_glClearBufferfv = NULL;
PFNGLCLEARBUFFERIVPROC tgui_glad_glClearBufferiv = NULL;
PFNGLCLEARBUFFERUIVPROC tgui_glad_glClearBufferuiv = NULL;
PFNGLCLEARCOLORPROC tgui_glad_glClearColor = NULL;
PFNGLCLEARDEPTHFPROC tgui_glad_glClearDepthf = NULL;
PFNGLCLEARSTENCILPROC tgui_glad_glClearStencil = NULL;
PFNGLCLIENTWAITSYNCPROC tgui_glad_glClientWaitSync = NULL;
PFNGLCOLORMASKPROC tgui_glad_glColorMask = NULL;
PFNGLCOLORMASKIPROC tgui_glad_glColorMaski = NULL;
PFNGLCOMPILESHADERPROC tgui_glad_glCompileShader = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DPROC tgui_glad_glCompressedTexImage2D = NULL;
PFNGLCOMPRESSEDTEXIMAGE3DPROC tgui_glad_glCompressedTexImage3D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC tgui_glad_glCompressedTexSubImage2D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC tgui_glad_glCompressedTexSubImage3D = NULL;
PFNGLCOPYBUFFERSUBDATAPROC tgui_glad_glCopyBufferSubData = NULL;
PFNGLCOPYIMAGESUBDATAPROC tgui_glad_glCopyImageSubData = NULL;
PFNGLCOPYTEXIMAGE2DPROC tgui_glad_glCopyTexImage2D = NULL;
PFNGLCOPYTEXSUBIMAGE2DPROC tgui_glad_glCopyTexSubImage2D = NULL;
PFNGLCOPYTEXSUBIMAGE3DPROC tgui_glad_glCopyTexSubImage3D = NULL;
PFNGLCREATEPROGRAMPROC tgui_glad_glCreateProgram = NULL;
PFNGLCREATESHADERPROC tgui_glad_glCreateShader = NULL;
PFNGLCREATESHADERPROGRAMVPROC tgui_glad_glCreateShaderProgramv = NULL;
PFNGLCULLFACEPROC tgui_glad_glCullFace = NULL;
PFNGLDEBUGMESSAGECALLBACKPROC tgui_glad_glDebugMessageCallback = NULL;
PFNGLDEBUGMESSAGECONTROLPROC tgui_glad_glDebugMessageControl = NULL;
PFNGLDEBUGMESSAGEINSERTPROC tgui_glad_glDebugMessageInsert = NULL;
PFNGLDELETEBUFFERSPROC tgui_glad_glDeleteBuffers = NULL;
PFNGLDELETEFRAMEBUFFERSPROC tgui_glad_glDeleteFramebuffers = NULL;
PFNGLDELETEPROGRAMPROC tgui_glad_glDeleteProgram = NULL;
PFNGLDELETEPROGRAMPIPELINESPROC tgui_glad_glDeleteProgramPipelines = NULL;
PFNGLDELETEQUERIESPROC tgui_glad_glDeleteQueries = NULL;
PFNGLDELETERENDERBUFFERSPROC tgui_glad_glDeleteRenderbuffers = NULL;
PFNGLDELETESAMPLERSPROC tgui_glad_glDeleteSamplers = NULL;
PFNGLDELETESHADERPROC tgui_glad_glDeleteShader = NULL;
PFNGLDELETESYNCPROC tgui_glad_glDeleteSync = NULL;
PFNGLDELETETEXTURESPROC tgui_glad_glDeleteTextures = NULL;
PFNGLDELETETRANSFORMFEEDBACKSPROC tgui_glad_glDeleteTransformFeedbacks = NULL;
PFNGLDELETEVERTEXARRAYSPROC tgui_glad_glDeleteVertexArrays = NULL;
PFNGLDEPTHFUNCPROC tgui_glad_glDepthFunc = NULL;
PFNGLDEPTHMASKPROC tgui_glad_glDepthMask = NULL;
PFNGLDEPTHRANGEFPROC tgui_glad_glDepthRangef = NULL;
PFNGLDETACHSHADERPROC tgui_glad_glDetachShader = NULL;
PFNGLDISABLEPROC tgui_glad_glDisable = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYPROC tgui_glad_glDisableVertexAttribArray = NULL;
PFNGLDISABLEIPROC tgui_glad_glDisablei = NULL;
PFNGLDISPATCHCOMPUTEPROC tgui_glad_glDispatchCompute = NULL;
PFNGLDISPATCHCOMPUTEINDIRECTPROC tgui_glad_glDispatchComputeIndirect = NULL;
PFNGLDRAWARRAYSPROC tgui_glad_glDrawArrays = NULL;
PFNGLDRAWARRAYSINDIRECTPROC tgui_glad_glDrawArraysIndirect = NULL;
PFNGLDRAWARRAYSINSTANCEDPROC tgui_glad_glDrawArraysInstanced = NULL;
PFNGLDRAWBUFFERSPROC tgui_glad_glDrawBuffers = NULL;
PFNGLDRAWELEMENTSPROC tgui_glad_glDrawElements = NULL;
PFNGLDRAWELEMENTSBASEVERTEXPROC tgui_glad_glDrawElementsBaseVertex = NULL;
PFNGLDRAWELEMENTSINDIRECTPROC tgui_glad_glDrawElementsIndirect = NULL;
PFNGLDRAWELEMENTSINSTANCEDPROC tgui_glad_glDrawElementsInstanced = NULL;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC tgui_glad_glDrawElementsInstancedBaseVertex = NULL;
PFNGLDRAWRANGEELEMENTSPROC tgui_glad_glDrawRangeElements = NULL;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC tgui_glad_glDrawRangeElementsBaseVertex = NULL;
PFNGLENABLEPROC tgui_glad_glEnable = NULL;
PFNGLENABLEVERTEXATTRIBARRAYPROC tgui_glad_glEnableVertexAttribArray = NULL;
PFNGLENABLEIPROC tgui_glad_glEnablei = NULL;
PFNGLENDQUERYPROC tgui_glad_glEndQuery = NULL;
PFNGLENDTRANSFORMFEEDBACKPROC tgui_glad_glEndTransformFeedback = NULL;
PFNGLFENCESYNCPROC tgui_glad_glFenceSync = NULL;
PFNGLFINISHPROC tgui_glad_glFinish = NULL;
PFNGLFLUSHPROC tgui_glad_glFlush = NULL;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC tgui_glad_glFlushMappedBufferRange = NULL;
PFNGLFRAMEBUFFERPARAMETERIPROC tgui_glad_glFramebufferParameteri = NULL;
PFNGLFRAMEBUFFERRENDERBUFFERPROC tgui_glad_glFramebufferRenderbuffer = NULL;
PFNGLFRAMEBUFFERTEXTUREPROC tgui_glad_glFramebufferTexture = NULL;
PFNGLFRAMEBUFFERTEXTURE2DPROC tgui_glad_glFramebufferTexture2D = NULL;
PFNGLFRAMEBUFFERTEXTURELAYERPROC tgui_glad_glFramebufferTextureLayer = NULL;
PFNGLFRONTFACEPROC tgui_glad_glFrontFace = NULL;
PFNGLGENBUFFERSPROC tgui_glad_glGenBuffers = NULL;
PFNGLGENFRAMEBUFFERSPROC tgui_glad_glGenFramebuffers = NULL;
PFNGLGENPROGRAMPIPELINESPROC tgui_glad_glGenProgramPipelines = NULL;
PFNGLGENQUERIESPROC tgui_glad_glGenQueries = NULL;
PFNGLGENRENDERBUFFERSPROC tgui_glad_glGenRenderbuffers = NULL;
PFNGLGENSAMPLERSPROC tgui_glad_glGenSamplers = NULL;
PFNGLGENTEXTURESPROC tgui_glad_glGenTextures = NULL;
PFNGLGENTRANSFORMFEEDBACKSPROC tgui_glad_glGenTransformFeedbacks = NULL;
PFNGLGENVERTEXARRAYSPROC tgui_glad_glGenVertexArrays = NULL;
PFNGLGENERATEMIPMAPPROC tgui_glad_glGenerateMipmap = NULL;
PFNGLGETACTIVEATTRIBPROC tgui_glad_glGetActiveAttrib = NULL;
PFNGLGETACTIVEUNIFORMPROC tgui_glad_glGetActiveUniform = NULL;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC tgui_glad_glGetActiveUniformBlockName = NULL;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC tgui_glad_glGetActiveUniformBlockiv = NULL;
PFNGLGETACTIVEUNIFORMSIVPROC tgui_glad_glGetActiveUniformsiv = NULL;
PFNGLGETATTACHEDSHADERSPROC tgui_glad_glGetAttachedShaders = NULL;
PFNGLGETATTRIBLOCATIONPROC tgui_glad_glGetAttribLocation = NULL;
PFNGLGETBOOLEANI_VPROC tgui_glad_glGetBooleani_v = NULL;
PFNGLGETBOOLEANVPROC tgui_glad_glGetBooleanv = NULL;
PFNGLGETBUFFERPARAMETERI64VPROC tgui_glad_glGetBufferParameteri64v = NULL;
PFNGLGETBUFFERPARAMETERIVPROC tgui_glad_glGetBufferParameteriv = NULL;
PFNGLGETBUFFERPOINTERVPROC tgui_glad_glGetBufferPointerv = NULL;
PFNGLGETDEBUGMESSAGELOGPROC tgui_glad_glGetDebugMessageLog = NULL;
PFNGLGETERRORPROC tgui_glad_glGetError = NULL;
PFNGLGETFLOATVPROC tgui_glad_glGetFloatv = NULL;
PFNGLGETFRAGDATALOCATIONPROC tgui_glad_glGetFragDataLocation = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC tgui_glad_glGetFramebufferAttachmentParameteriv = NULL;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC tgui_glad_glGetFramebufferParameteriv = NULL;
PFNGLGETGRAPHICSRESETSTATUSPROC tgui_glad_glGetGraphicsResetStatus = NULL;
PFNGLGETINTEGER64I_VPROC tgui_glad_glGetInteger64i_v = NULL;
PFNGLGETINTEGER64VPROC tgui_glad_glGetInteger64v = NULL;
PFNGLGETINTEGERI_VPROC tgui_glad_glGetIntegeri_v = NULL;
PFNGLGETINTEGERVPROC tgui_glad_glGetIntegerv = NULL;
PFNGLGETINTERNALFORMATIVPROC tgui_glad_glGetInternalformativ = NULL;
PFNGLGETMULTISAMPLEFVPROC tgui_glad_glGetMultisamplefv = NULL;
PFNGLGETOBJECTLABELPROC tgui_glad_glGetObjectLabel = NULL;
PFNGLGETOBJECTPTRLABELPROC tgui_glad_glGetObjectPtrLabel = NULL;
PFNGLGETPOINTERVPROC tgui_glad_glGetPointerv = NULL;
PFNGLGETPROGRAMBINARYPROC tgui_glad_glGetProgramBinary = NULL;
PFNGLGETPROGRAMINFOLOGPROC tgui_glad_glGetProgramInfoLog = NULL;
PFNGLGETPROGRAMINTERFACEIVPROC tgui_glad_glGetProgramInterfaceiv = NULL;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC tgui_glad_glGetProgramPipelineInfoLog = NULL;
PFNGLGETPROGRAMPIPELINEIVPROC tgui_glad_glGetProgramPipelineiv = NULL;
PFNGLGETPROGRAMRESOURCEINDEXPROC tgui_glad_glGetProgramResourceIndex = NULL;
PFNGLGETPROGRAMRESOURCELOCATIONPROC tgui_glad_glGetProgramResourceLocation = NULL;
PFNGLGETPROGRAMRESOURCENAMEPROC tgui_glad_glGetProgramResourceName = NULL;
PFNGLGETPROGRAMRESOURCEIVPROC tgui_glad_glGetProgramResourceiv = NULL;
PFNGLGETPROGRAMIVPROC tgui_glad_glGetProgramiv = NULL;
PFNGLGETQUERYOBJECTUIVPROC tgui_glad_glGetQueryObjectuiv = NULL;
PFNGLGETQUERYIVPROC tgui_glad_glGetQueryiv = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVPROC tgui_glad_glGetRenderbufferParameteriv = NULL;
PFNGLGETSAMPLERPARAMETERIIVPROC tgui_glad_glGetSamplerParameterIiv = NULL;
PFNGLGETSAMPLERPARAMETERIUIVPROC tgui_glad_glGetSamplerParameterIuiv = NULL;
PFNGLGETSAMPLERPARAMETERFVPROC tgui_glad_glGetSamplerParameterfv = NULL;
PFNGLGETSAMPLERPARAMETERIVPROC tgui_glad_glGetSamplerParameteriv = NULL;
PFNGLGETSHADERINFOLOGPROC tgui_glad_glGetShaderInfoLog = NULL;
PFNGLGETSHADERPRECISIONFORMATPROC tgui_glad_glGetShaderPrecisionFormat = NULL;
PFNGLGETSHADERSOURCEPROC tgui_glad_glGetShaderSource = NULL;
PFNGLGETSHADERIVPROC tgui_glad_glGetShaderiv = NULL;
PFNGLGETSTRINGPROC tgui_glad_glGetString = NULL;
PFNGLGETSTRINGIPROC tgui_glad_glGetStringi = NULL;
PFNGLGETSYNCIVPROC tgui_glad_glGetSynciv = NULL;
PFNGLGETTEXLEVELPARAMETERFVPROC tgui_glad_glGetTexLevelParameterfv = NULL;
PFNGLGETTEXLEVELPARAMETERIVPROC tgui_glad_glGetTexLevelParameteriv = NULL;
PFNGLGETTEXPARAMETERIIVPROC tgui_glad_glGetTexParameterIiv = NULL;
PFNGLGETTEXPARAMETERIUIVPROC tgui_glad_glGetTexParameterIuiv = NULL;
PFNGLGETTEXPARAMETERFVPROC tgui_glad_glGetTexParameterfv = NULL;
PFNGLGETTEXPARAMETERIVPROC tgui_glad_glGetTexParameteriv = NULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC tgui_glad_glGetTransformFeedbackVarying = NULL;
PFNGLGETUNIFORMBLOCKINDEXPROC tgui_glad_glGetUniformBlockIndex = NULL;
PFNGLGETUNIFORMINDICESPROC tgui_glad_glGetUniformIndices = NULL;
PFNGLGETUNIFORMLOCATIONPROC tgui_glad_glGetUniformLocation = NULL;
PFNGLGETUNIFORMFVPROC tgui_glad_glGetUniformfv = NULL;
PFNGLGETUNIFORMIVPROC tgui_glad_glGetUniformiv = NULL;
PFNGLGETUNIFORMUIVPROC tgui_glad_glGetUniformuiv = NULL;
PFNGLGETVERTEXATTRIBIIVPROC tgui_glad_glGetVertexAttribIiv = NULL;
PFNGLGETVERTEXATTRIBIUIVPROC tgui_glad_glGetVertexAttribIuiv = NULL;
PFNGLGETVERTEXATTRIBPOINTERVPROC tgui_glad_glGetVertexAttribPointerv = NULL;
PFNGLGETVERTEXATTRIBFVPROC tgui_glad_glGetVertexAttribfv = NULL;
PFNGLGETVERTEXATTRIBIVPROC tgui_glad_glGetVertexAttribiv = NULL;
PFNGLGETNUNIFORMFVPROC tgui_glad_glGetnUniformfv = NULL;
PFNGLGETNUNIFORMIVPROC tgui_glad_glGetnUniformiv = NULL;
PFNGLGETNUNIFORMUIVPROC tgui_glad_glGetnUniformuiv = NULL;
PFNGLHINTPROC tgui_glad_glHint = NULL;
PFNGLINVALIDATEFRAMEBUFFERPROC tgui_glad_glInvalidateFramebuffer = NULL;
PFNGLINVALIDATESUBFRAMEBUFFERPROC tgui_glad_glInvalidateSubFramebuffer = NULL;
PFNGLISBUFFERPROC tgui_glad_glIsBuffer = NULL;
PFNGLISENABLEDPROC tgui_glad_glIsEnabled = NULL;
PFNGLISENABLEDIPROC tgui_glad_glIsEnabledi = NULL;
PFNGLISFRAMEBUFFERPROC tgui_glad_glIsFramebuffer = NULL;
PFNGLISPROGRAMPROC tgui_glad_glIsProgram = NULL;
PFNGLISPROGRAMPIPELINEPROC tgui_glad_glIsProgramPipeline = NULL;
PFNGLISQUERYPROC tgui_glad_glIsQuery = NULL;
PFNGLISRENDERBUFFERPROC tgui_glad_glIsRenderbuffer = NULL;
PFNGLISSAMPLERPROC tgui_glad_glIsSampler = NULL;
PFNGLISSHADERPROC tgui_glad_glIsShader = NULL;
PFNGLISSYNCPROC tgui_glad_glIsSync = NULL;
PFNGLISTEXTUREPROC tgui_glad_glIsTexture = NULL;
PFNGLISTRANSFORMFEEDBACKPROC tgui_glad_glIsTransformFeedback = NULL;
PFNGLISVERTEXARRAYPROC tgui_glad_glIsVertexArray = NULL;
PFNGLLINEWIDTHPROC tgui_glad_glLineWidth = NULL;
PFNGLLINKPROGRAMPROC tgui_glad_glLinkProgram = NULL;
PFNGLMAPBUFFERRANGEPROC tgui_glad_glMapBufferRange = NULL;
PFNGLMEMORYBARRIERPROC tgui_glad_glMemoryBarrier = NULL;
PFNGLMEMORYBARRIERBYREGIONPROC tgui_glad_glMemoryBarrierByRegion = NULL;
PFNGLMINSAMPLESHADINGPROC tgui_glad_glMinSampleShading = NULL;
PFNGLOBJECTLABELPROC tgui_glad_glObjectLabel = NULL;
PFNGLOBJECTPTRLABELPROC tgui_glad_glObjectPtrLabel = NULL;
PFNGLPATCHPARAMETERIPROC tgui_glad_glPatchParameteri = NULL;
PFNGLPAUSETRANSFORMFEEDBACKPROC tgui_glad_glPauseTransformFeedback = NULL;
PFNGLPIXELSTOREIPROC tgui_glad_glPixelStorei = NULL;
PFNGLPOLYGONOFFSETPROC tgui_glad_glPolygonOffset = NULL;
PFNGLPOPDEBUGGROUPPROC tgui_glad_glPopDebugGroup = NULL;
PFNGLPRIMITIVEBOUNDINGBOXPROC tgui_glad_glPrimitiveBoundingBox = NULL;
PFNGLPROGRAMBINARYPROC tgui_glad_glProgramBinary = NULL;
PFNGLPROGRAMPARAMETERIPROC tgui_glad_glProgramParameteri = NULL;
PFNGLPROGRAMUNIFORM1FPROC tgui_glad_glProgramUniform1f = NULL;
PFNGLPROGRAMUNIFORM1FVPROC tgui_glad_glProgramUniform1fv = NULL;
PFNGLPROGRAMUNIFORM1IPROC tgui_glad_glProgramUniform1i = NULL;
PFNGLPROGRAMUNIFORM1IVPROC tgui_glad_glProgramUniform1iv = NULL;
PFNGLPROGRAMUNIFORM1UIPROC tgui_glad_glProgramUniform1ui = NULL;
PFNGLPROGRAMUNIFORM1UIVPROC tgui_glad_glProgramUniform1uiv = NULL;
PFNGLPROGRAMUNIFORM2FPROC tgui_glad_glProgramUniform2f = NULL;
PFNGLPROGRAMUNIFORM2FVPROC tgui_glad_glProgramUniform2fv = NULL;
PFNGLPROGRAMUNIFORM2IPROC tgui_glad_glProgramUniform2i = NULL;
PFNGLPROGRAMUNIFORM2IVPROC tgui_glad_glProgramUniform2iv = NULL;
PFNGLPROGRAMUNIFORM2UIPROC tgui_glad_glProgramUniform2ui = NULL;
PFNGLPROGRAMUNIFORM2UIVPROC tgui_glad_glProgramUniform2uiv = NULL;
PFNGLPROGRAMUNIFORM3FPROC tgui_glad_glProgramUniform3f = NULL;
PFNGLPROGRAMUNIFORM3FVPROC tgui_glad_glProgramUniform3fv = NULL;
PFNGLPROGRAMUNIFORM3IPROC tgui_glad_glProgramUniform3i = NULL;
PFNGLPROGRAMUNIFORM3IVPROC tgui_glad_glProgramUniform3iv = NULL;
PFNGLPROGRAMUNIFORM3UIPROC tgui_glad_glProgramUniform3ui = NULL;
PFNGLPROGRAMUNIFORM3UIVPROC tgui_glad_glProgramUniform3uiv = NULL;
PFNGLPROGRAMUNIFORM4FPROC tgui_glad_glProgramUniform4f = NULL;
PFNGLPROGRAMUNIFORM4FVPROC tgui_glad_glProgramUniform4fv = NULL;
PFNGLPROGRAMUNIFORM4IPROC tgui_glad_glProgramUniform4i = NULL;
PFNGLPROGRAMUNIFORM4IVPROC tgui_glad_glProgramUniform4iv = NULL;
PFNGLPROGRAMUNIFORM4UIPROC tgui_glad_glProgramUniform4ui = NULL;
PFNGLPROGRAMUNIFORM4UIVPROC tgui_glad_glProgramUniform4uiv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC tgui_glad_glProgramUniformMatrix2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC tgui_glad_glProgramUniformMatrix2x3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC tgui_glad_glProgramUniformMatrix2x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC tgui_glad_glProgramUniformMatrix3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC tgui_glad_glProgramUniformMatrix3x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC tgui_glad_glProgramUniformMatrix3x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC tgui_glad_glProgramUniformMatrix4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC tgui_glad_glProgramUniformMatrix4x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC tgui_glad_glProgramUniformMatrix4x3fv = NULL;
PFNGLPUSHDEBUGGROUPPROC tgui_glad_glPushDebugGroup = NULL;
PFNGLREADBUFFERPROC tgui_glad_glReadBuffer = NULL;
PFNGLREADPIXELSPROC tgui_glad_glReadPixels = NULL;
PFNGLREADNPIXELSPROC tgui_glad_glReadnPixels = NULL;
PFNGLRELEASESHADERCOMPILERPROC tgui_glad_glReleaseShaderCompiler = NULL;
PFNGLRENDERBUFFERSTORAGEPROC tgui_glad_glRenderbufferStorage = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC tgui_glad_glRenderbufferStorageMultisample = NULL;
PFNGLRESUMETRANSFORMFEEDBACKPROC tgui_glad_glResumeTransformFeedback = NULL;
PFNGLSAMPLECOVERAGEPROC tgui_glad_glSampleCoverage = NULL;
PFNGLSAMPLEMASKIPROC tgui_glad_glSampleMaski = NULL;
PFNGLSAMPLERPARAMETERIIVPROC tgui_glad_glSamplerParameterIiv = NULL;
PFNGLSAMPLERPARAMETERIUIVPROC tgui_glad_glSamplerParameterIuiv = NULL;
PFNGLSAMPLERPARAMETERFPROC tgui_glad_glSamplerParameterf = NULL;
PFNGLSAMPLERPARAMETERFVPROC tgui_glad_glSamplerParameterfv = NULL;
PFNGLSAMPLERPARAMETERIPROC tgui_glad_glSamplerParameteri = NULL;
PFNGLSAMPLERPARAMETERIVPROC tgui_glad_glSamplerParameteriv = NULL;
PFNGLSCISSORPROC tgui_glad_glScissor = NULL;
PFNGLSHADERBINARYPROC tgui_glad_glShaderBinary = NULL;
PFNGLSHADERSOURCEPROC tgui_glad_glShaderSource = NULL;
PFNGLSTENCILFUNCPROC tgui_glad_glStencilFunc = NULL;
PFNGLSTENCILFUNCSEPARATEPROC tgui_glad_glStencilFuncSeparate = NULL;
PFNGLSTENCILMASKPROC tgui_glad_glStencilMask = NULL;
PFNGLSTENCILMASKSEPARATEPROC tgui_glad_glStencilMaskSeparate = NULL;
PFNGLSTENCILOPPROC tgui_glad_glStencilOp = NULL;
PFNGLSTENCILOPSEPARATEPROC tgui_glad_glStencilOpSeparate = NULL;
PFNGLTEXBUFFERPROC tgui_glad_glTexBuffer = NULL;
PFNGLTEXBUFFERRANGEPROC tgui_glad_glTexBufferRange = NULL;
PFNGLTEXIMAGE2DPROC tgui_glad_glTexImage2D = NULL;
PFNGLTEXIMAGE3DPROC tgui_glad_glTexImage3D = NULL;
PFNGLTEXPARAMETERIIVPROC tgui_glad_glTexParameterIiv = NULL;
PFNGLTEXPARAMETERIUIVPROC tgui_glad_glTexParameterIuiv = NULL;
PFNGLTEXPARAMETERFPROC tgui_glad_glTexParameterf = NULL;
PFNGLTEXPARAMETERFVPROC tgui_glad_glTexParameterfv = NULL;
PFNGLTEXPARAMETERIPROC tgui_glad_glTexParameteri = NULL;
PFNGLTEXPARAMETERIVPROC tgui_glad_glTexParameteriv = NULL;
PFNGLTEXSTORAGE2DPROC tgui_glad_glTexStorage2D = NULL;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC tgui_glad_glTexStorage2DMultisample = NULL;
PFNGLTEXSTORAGE3DPROC tgui_glad_glTexStorage3D = NULL;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC tgui_glad_glTexStorage3DMultisample = NULL;
PFNGLTEXSUBIMAGE2DPROC tgui_glad_glTexSubImage2D = NULL;
PFNGLTEXSUBIMAGE3DPROC tgui_glad_glTexSubImage3D = NULL;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC tgui_glad_glTransformFeedbackVaryings = NULL;
PFNGLUNIFORM1FPROC tgui_glad_glUniform1f = NULL;
PFNGLUNIFORM1FVPROC tgui_glad_glUniform1fv = NULL;
PFNGLUNIFORM1IPROC tgui_glad_glUniform1i = NULL;
PFNGLUNIFORM1IVPROC tgui_glad_glUniform1iv = NULL;
PFNGLUNIFORM1UIPROC tgui_glad_glUniform1ui = NULL;
PFNGLUNIFORM1UIVPROC tgui_glad_glUniform1uiv = NULL;
PFNGLUNIFORM2FPROC tgui_glad_glUniform2f = NULL;
PFNGLUNIFORM2FVPROC tgui_glad_glUniform2fv = NULL;
PFNGLUNIFORM2IPROC tgui_glad_glUniform2i = NULL;
PFNGLUNIFORM2IVPROC tgui_glad_glUniform2iv = NULL;
PFNGLUNIFORM2UIPROC tgui_glad_glUniform2ui = NULL;
PFNGLUNIFORM2UIVPROC tgui_glad_glUniform2uiv = NULL;
PFNGLUNIFORM3FPROC tgui_glad_glUniform3f = NULL;
PFNGLUNIFORM3FVPROC tgui_glad_glUniform3fv = NULL;
PFNGLUNIFORM3IPROC tgui_glad_glUniform3i = NULL;
PFNGLUNIFORM3IVPROC tgui_glad_glUniform3iv = NULL;
PFNGLUNIFORM3UIPROC tgui_glad_glUniform3ui = NULL;
PFNGLUNIFORM3UIVPROC tgui_glad_glUniform3uiv = NULL;
PFNGLUNIFORM4FPROC tgui_glad_glUniform4f = NULL;
PFNGLUNIFORM4FVPROC tgui_glad_glUniform4fv = NULL;
PFNGLUNIFORM4IPROC tgui_glad_glUniform4i = NULL;
PFNGLUNIFORM4IVPROC tgui_glad_glUniform4iv = NULL;
PFNGLUNIFORM4UIPROC tgui_glad_glUniform4ui = NULL;
PFNGLUNIFORM4UIVPROC tgui_glad_glUniform4uiv = NULL;
PFNGLUNIFORMBLOCKBINDINGPROC tgui_glad_glUniformBlockBinding = NULL;
PFNGLUNIFORMMATRIX2FVPROC tgui_glad_glUniformMatrix2fv = NULL;
PFNGLUNIFORMMATRIX2X3FVPROC tgui_glad_glUniformMatrix2x3fv = NULL;
PFNGLUNIFORMMATRIX2X4FVPROC tgui_glad_glUniformMatrix2x4fv = NULL;
PFNGLUNIFORMMATRIX3FVPROC tgui_glad_glUniformMatrix3fv = NULL;
PFNGLUNIFORMMATRIX3X2FVPROC tgui_glad_glUniformMatrix3x2fv = NULL;
PFNGLUNIFORMMATRIX3X4FVPROC tgui_glad_glUniformMatrix3x4fv = NULL;
PFNGLUNIFORMMATRIX4FVPROC tgui_glad_glUniformMatrix4fv = NULL;
PFNGLUNIFORMMATRIX4X2FVPROC tgui_glad_glUniformMatrix4x2fv = NULL;
PFNGLUNIFORMMATRIX4X3FVPROC tgui_glad_glUniformMatrix4x3fv = NULL;
PFNGLUNMAPBUFFERPROC tgui_glad_glUnmapBuffer = NULL;
PFNGLUSEPROGRAMPROC tgui_glad_glUseProgram = NULL;
PFNGLUSEPROGRAMSTAGESPROC tgui_glad_glUseProgramStages = NULL;
PFNGLVALIDATEPROGRAMPROC tgui_glad_glValidateProgram = NULL;
PFNGLVALIDATEPROGRAMPIPELINEPROC tgui_glad_glValidateProgramPipeline = NULL;
PFNGLVERTEXATTRIB1FPROC tgui_glad_glVertexAttrib1f = NULL;
PFNGLVERTEXATTRIB1FVPROC tgui_glad_glVertexAttrib1fv = NULL;
PFNGLVERTEXATTRIB2FPROC tgui_glad_glVertexAttrib2f = NULL;
PFNGLVERTEXATTRIB2FVPROC tgui_glad_glVertexAttrib2fv = NULL;
PFNGLVERTEXATTRIB3FPROC tgui_glad_glVertexAttrib3f = NULL;
PFNGLVERTEXATTRIB3FVPROC tgui_glad_glVertexAttrib3fv = NULL;
PFNGLVERTEXATTRIB4FPROC tgui_glad_glVertexAttrib4f = NULL;
PFNGLVERTEXATTRIB4FVPROC tgui_glad_glVertexAttrib4fv = NULL;
PFNGLVERTEXATTRIBBINDINGPROC tgui_glad_glVertexAttribBinding = NULL;
PFNGLVERTEXATTRIBDIVISORPROC tgui_glad_glVertexAttribDivisor = NULL;
PFNGLVERTEXATTRIBFORMATPROC tgui_glad_glVertexAttribFormat = NULL;
PFNGLVERTEXATTRIBI4IPROC tgui_glad_glVertexAttribI4i = NULL;
PFNGLVERTEXATTRIBI4IVPROC tgui_glad_glVertexAttribI4iv = NULL;
PFNGLVERTEXATTRIBI4UIPROC tgui_glad_glVertexAttribI4ui = NULL;
PFNGLVERTEXATTRIBI4UIVPROC tgui_glad_glVertexAttribI4uiv = NULL;
PFNGLVERTEXATTRIBIFORMATPROC tgui_glad_glVertexAttribIFormat = NULL;
PFNGLVERTEXATTRIBIPOINTERPROC tgui_glad_glVertexAttribIPointer = NULL;
PFNGLVERTEXATTRIBPOINTERPROC tgui_glad_glVertexAttribPointer = NULL;
PFNGLVERTEXBINDINGDIVISORPROC tgui_glad_glVertexBindingDivisor = NULL;
PFNGLVIEWPORTPROC tgui_glad_glViewport = NULL;
PFNGLWAITSYNCPROC tgui_glad_glWaitSync = NULL;


static void tgui_glad_gl_load_GL_ES_VERSION_2_0( TGUI_GLADuserptrloadfunc load, void* userptr) {
    if(!TGUI_GLAD_GL_ES_VERSION_2_0) return;
    tgui_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    tgui_glad_glAttachShader = (PFNGLATTACHSHADERPROC) load(userptr, "glAttachShader");
    tgui_glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load(userptr, "glBindAttribLocation");
    tgui_glad_glBindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    tgui_glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    tgui_glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    tgui_glad_glBindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    tgui_glad_glBlendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    tgui_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    tgui_glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load(userptr, "glBlendEquationSeparate");
    tgui_glad_glBlendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    tgui_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load(userptr, "glBlendFuncSeparate");
    tgui_glad_glBufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    tgui_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    tgui_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    tgui_glad_glClear = (PFNGLCLEARPROC) load(userptr, "glClear");
    tgui_glad_glClearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    tgui_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    tgui_glad_glClearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    tgui_glad_glColorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    tgui_glad_glCompileShader = (PFNGLCOMPILESHADERPROC) load(userptr, "glCompileShader");
    tgui_glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load(userptr, "glCompressedTexImage2D");
    tgui_glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load(userptr, "glCompressedTexSubImage2D");
    tgui_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    tgui_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    tgui_glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC) load(userptr, "glCreateProgram");
    tgui_glad_glCreateShader = (PFNGLCREATESHADERPROC) load(userptr, "glCreateShader");
    tgui_glad_glCullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    tgui_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    tgui_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    tgui_glad_glDeleteProgram = (PFNGLDELETEPROGRAMPROC) load(userptr, "glDeleteProgram");
    tgui_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    tgui_glad_glDeleteShader = (PFNGLDELETESHADERPROC) load(userptr, "glDeleteShader");
    tgui_glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    tgui_glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    tgui_glad_glDepthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    tgui_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    tgui_glad_glDetachShader = (PFNGLDETACHSHADERPROC) load(userptr, "glDetachShader");
    tgui_glad_glDisable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    tgui_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    tgui_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    tgui_glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    tgui_glad_glEnable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    tgui_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    tgui_glad_glFinish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    tgui_glad_glFlush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    tgui_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    tgui_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    tgui_glad_glFrontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    tgui_glad_glGenBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    tgui_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    tgui_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    tgui_glad_glGenTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    tgui_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    tgui_glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load(userptr, "glGetActiveAttrib");
    tgui_glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load(userptr, "glGetActiveUniform");
    tgui_glad_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load(userptr, "glGetAttachedShaders");
    tgui_glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load(userptr, "glGetAttribLocation");
    tgui_glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    tgui_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    tgui_glad_glGetError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    tgui_glad_glGetFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    tgui_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    tgui_glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    tgui_glad_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load(userptr, "glGetProgramInfoLog");
    tgui_glad_glGetProgramiv = (PFNGLGETPROGRAMIVPROC) load(userptr, "glGetProgramiv");
    tgui_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    tgui_glad_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load(userptr, "glGetShaderInfoLog");
    tgui_glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load(userptr, "glGetShaderPrecisionFormat");
    tgui_glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) load(userptr, "glGetShaderSource");
    tgui_glad_glGetShaderiv = (PFNGLGETSHADERIVPROC) load(userptr, "glGetShaderiv");
    tgui_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    tgui_glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    tgui_glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    tgui_glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load(userptr, "glGetUniformLocation");
    tgui_glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) load(userptr, "glGetUniformfv");
    tgui_glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) load(userptr, "glGetUniformiv");
    tgui_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    tgui_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    tgui_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    tgui_glad_glHint = (PFNGLHINTPROC) load(userptr, "glHint");
    tgui_glad_glIsBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    tgui_glad_glIsEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    tgui_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    tgui_glad_glIsProgram = (PFNGLISPROGRAMPROC) load(userptr, "glIsProgram");
    tgui_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    tgui_glad_glIsShader = (PFNGLISSHADERPROC) load(userptr, "glIsShader");
    tgui_glad_glIsTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    tgui_glad_glLineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    tgui_glad_glLinkProgram = (PFNGLLINKPROGRAMPROC) load(userptr, "glLinkProgram");
    tgui_glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    tgui_glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    tgui_glad_glReadPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    tgui_glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load(userptr, "glReleaseShaderCompiler");
    tgui_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    tgui_glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load(userptr, "glSampleCoverage");
    tgui_glad_glScissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    tgui_glad_glShaderBinary = (PFNGLSHADERBINARYPROC) load(userptr, "glShaderBinary");
    tgui_glad_glShaderSource = (PFNGLSHADERSOURCEPROC) load(userptr, "glShaderSource");
    tgui_glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    tgui_glad_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load(userptr, "glStencilFuncSeparate");
    tgui_glad_glStencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    tgui_glad_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load(userptr, "glStencilMaskSeparate");
    tgui_glad_glStencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    tgui_glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load(userptr, "glStencilOpSeparate");
    tgui_glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    tgui_glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    tgui_glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    tgui_glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    tgui_glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    tgui_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
    tgui_glad_glUniform1f = (PFNGLUNIFORM1FPROC) load(userptr, "glUniform1f");
    tgui_glad_glUniform1fv = (PFNGLUNIFORM1FVPROC) load(userptr, "glUniform1fv");
    tgui_glad_glUniform1i = (PFNGLUNIFORM1IPROC) load(userptr, "glUniform1i");
    tgui_glad_glUniform1iv = (PFNGLUNIFORM1IVPROC) load(userptr, "glUniform1iv");
    tgui_glad_glUniform2f = (PFNGLUNIFORM2FPROC) load(userptr, "glUniform2f");
    tgui_glad_glUniform2fv = (PFNGLUNIFORM2FVPROC) load(userptr, "glUniform2fv");
    tgui_glad_glUniform2i = (PFNGLUNIFORM2IPROC) load(userptr, "glUniform2i");
    tgui_glad_glUniform2iv = (PFNGLUNIFORM2IVPROC) load(userptr, "glUniform2iv");
    tgui_glad_glUniform3f = (PFNGLUNIFORM3FPROC) load(userptr, "glUniform3f");
    tgui_glad_glUniform3fv = (PFNGLUNIFORM3FVPROC) load(userptr, "glUniform3fv");
    tgui_glad_glUniform3i = (PFNGLUNIFORM3IPROC) load(userptr, "glUniform3i");
    tgui_glad_glUniform3iv = (PFNGLUNIFORM3IVPROC) load(userptr, "glUniform3iv");
    tgui_glad_glUniform4f = (PFNGLUNIFORM4FPROC) load(userptr, "glUniform4f");
    tgui_glad_glUniform4fv = (PFNGLUNIFORM4FVPROC) load(userptr, "glUniform4fv");
    tgui_glad_glUniform4i = (PFNGLUNIFORM4IPROC) load(userptr, "glUniform4i");
    tgui_glad_glUniform4iv = (PFNGLUNIFORM4IVPROC) load(userptr, "glUniform4iv");
    tgui_glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load(userptr, "glUniformMatrix2fv");
    tgui_glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load(userptr, "glUniformMatrix3fv");
    tgui_glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load(userptr, "glUniformMatrix4fv");
    tgui_glad_glUseProgram = (PFNGLUSEPROGRAMPROC) load(userptr, "glUseProgram");
    tgui_glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) load(userptr, "glValidateProgram");
    tgui_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    tgui_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    tgui_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    tgui_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    tgui_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    tgui_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    tgui_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    tgui_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    tgui_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
    tgui_glad_glViewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void tgui_glad_gl_load_GL_ES_VERSION_3_0( TGUI_GLADuserptrloadfunc load, void* userptr) {
    if(!TGUI_GLAD_GL_ES_VERSION_3_0) return;
    tgui_glad_glBeginQuery = (PFNGLBEGINQUERYPROC) load(userptr, "glBeginQuery");
    tgui_glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) load(userptr, "glBeginTransformFeedback");
    tgui_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    tgui_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    tgui_glad_glBindSampler = (PFNGLBINDSAMPLERPROC) load(userptr, "glBindSampler");
    tgui_glad_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) load(userptr, "glBindTransformFeedback");
    tgui_glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    tgui_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    tgui_glad_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) load(userptr, "glClearBufferfi");
    tgui_glad_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) load(userptr, "glClearBufferfv");
    tgui_glad_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) load(userptr, "glClearBufferiv");
    tgui_glad_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) load(userptr, "glClearBufferuiv");
    tgui_glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    tgui_glad_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) load(userptr, "glCompressedTexImage3D");
    tgui_glad_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) load(userptr, "glCompressedTexSubImage3D");
    tgui_glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
    tgui_glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) load(userptr, "glCopyTexSubImage3D");
    tgui_glad_glDeleteQueries = (PFNGLDELETEQUERIESPROC) load(userptr, "glDeleteQueries");
    tgui_glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) load(userptr, "glDeleteSamplers");
    tgui_glad_glDeleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    tgui_glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) load(userptr, "glDeleteTransformFeedbacks");
    tgui_glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    tgui_glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) load(userptr, "glDrawArraysInstanced");
    tgui_glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC) load(userptr, "glDrawBuffers");
    tgui_glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) load(userptr, "glDrawElementsInstanced");
    tgui_glad_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) load(userptr, "glDrawRangeElements");
    tgui_glad_glEndQuery = (PFNGLENDQUERYPROC) load(userptr, "glEndQuery");
    tgui_glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) load(userptr, "glEndTransformFeedback");
    tgui_glad_glFenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    tgui_glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    tgui_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    tgui_glad_glGenQueries = (PFNGLGENQUERIESPROC) load(userptr, "glGenQueries");
    tgui_glad_glGenSamplers = (PFNGLGENSAMPLERSPROC) load(userptr, "glGenSamplers");
    tgui_glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) load(userptr, "glGenTransformFeedbacks");
    tgui_glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    tgui_glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    tgui_glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    tgui_glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    tgui_glad_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) load(userptr, "glGetBufferParameteri64v");
    tgui_glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) load(userptr, "glGetBufferPointerv");
    tgui_glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) load(userptr, "glGetFragDataLocation");
    tgui_glad_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) load(userptr, "glGetInteger64i_v");
    tgui_glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    tgui_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    tgui_glad_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) load(userptr, "glGetInternalformativ");
    tgui_glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load(userptr, "glGetProgramBinary");
    tgui_glad_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) load(userptr, "glGetQueryObjectuiv");
    tgui_glad_glGetQueryiv = (PFNGLGETQUERYIVPROC) load(userptr, "glGetQueryiv");
    tgui_glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load(userptr, "glGetSamplerParameterfv");
    tgui_glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load(userptr, "glGetSamplerParameteriv");
    tgui_glad_glGetStringi = (PFNGLGETSTRINGIPROC) load(userptr, "glGetStringi");
    tgui_glad_glGetSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    tgui_glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) load(userptr, "glGetTransformFeedbackVarying");
    tgui_glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    tgui_glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    tgui_glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) load(userptr, "glGetUniformuiv");
    tgui_glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) load(userptr, "glGetVertexAttribIiv");
    tgui_glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) load(userptr, "glGetVertexAttribIuiv");
    tgui_glad_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) load(userptr, "glInvalidateFramebuffer");
    tgui_glad_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) load(userptr, "glInvalidateSubFramebuffer");
    tgui_glad_glIsQuery = (PFNGLISQUERYPROC) load(userptr, "glIsQuery");
    tgui_glad_glIsSampler = (PFNGLISSAMPLERPROC) load(userptr, "glIsSampler");
    tgui_glad_glIsSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    tgui_glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) load(userptr, "glIsTransformFeedback");
    tgui_glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
    tgui_glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
    tgui_glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) load(userptr, "glPauseTransformFeedback");
    tgui_glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC) load(userptr, "glProgramBinary");
    tgui_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    tgui_glad_glReadBuffer = (PFNGLREADBUFFERPROC) load(userptr, "glReadBuffer");
    tgui_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
    tgui_glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) load(userptr, "glResumeTransformFeedback");
    tgui_glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load(userptr, "glSamplerParameterf");
    tgui_glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load(userptr, "glSamplerParameterfv");
    tgui_glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load(userptr, "glSamplerParameteri");
    tgui_glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load(userptr, "glSamplerParameteriv");
    tgui_glad_glTexImage3D = (PFNGLTEXIMAGE3DPROC) load(userptr, "glTexImage3D");
    tgui_glad_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) load(userptr, "glTexStorage2D");
    tgui_glad_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) load(userptr, "glTexStorage3D");
    tgui_glad_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) load(userptr, "glTexSubImage3D");
    tgui_glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) load(userptr, "glTransformFeedbackVaryings");
    tgui_glad_glUniform1ui = (PFNGLUNIFORM1UIPROC) load(userptr, "glUniform1ui");
    tgui_glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC) load(userptr, "glUniform1uiv");
    tgui_glad_glUniform2ui = (PFNGLUNIFORM2UIPROC) load(userptr, "glUniform2ui");
    tgui_glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC) load(userptr, "glUniform2uiv");
    tgui_glad_glUniform3ui = (PFNGLUNIFORM3UIPROC) load(userptr, "glUniform3ui");
    tgui_glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC) load(userptr, "glUniform3uiv");
    tgui_glad_glUniform4ui = (PFNGLUNIFORM4UIPROC) load(userptr, "glUniform4ui");
    tgui_glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC) load(userptr, "glUniform4uiv");
    tgui_glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
    tgui_glad_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) load(userptr, "glUniformMatrix2x3fv");
    tgui_glad_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) load(userptr, "glUniformMatrix2x4fv");
    tgui_glad_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) load(userptr, "glUniformMatrix3x2fv");
    tgui_glad_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) load(userptr, "glUniformMatrix3x4fv");
    tgui_glad_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) load(userptr, "glUniformMatrix4x2fv");
    tgui_glad_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) load(userptr, "glUniformMatrix4x3fv");
    tgui_glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) load(userptr, "glUnmapBuffer");
    tgui_glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) load(userptr, "glVertexAttribDivisor");
    tgui_glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) load(userptr, "glVertexAttribI4i");
    tgui_glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) load(userptr, "glVertexAttribI4iv");
    tgui_glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) load(userptr, "glVertexAttribI4ui");
    tgui_glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) load(userptr, "glVertexAttribI4uiv");
    tgui_glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) load(userptr, "glVertexAttribIPointer");
    tgui_glad_glWaitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void tgui_glad_gl_load_GL_ES_VERSION_3_1( TGUI_GLADuserptrloadfunc load, void* userptr) {
    if(!TGUI_GLAD_GL_ES_VERSION_3_1) return;
    tgui_glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load(userptr, "glActiveShaderProgram");
    tgui_glad_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) load(userptr, "glBindImageTexture");
    tgui_glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load(userptr, "glBindProgramPipeline");
    tgui_glad_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) load(userptr, "glBindVertexBuffer");
    tgui_glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load(userptr, "glCreateShaderProgramv");
    tgui_glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load(userptr, "glDeleteProgramPipelines");
    tgui_glad_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) load(userptr, "glDispatchCompute");
    tgui_glad_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) load(userptr, "glDispatchComputeIndirect");
    tgui_glad_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) load(userptr, "glDrawArraysIndirect");
    tgui_glad_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) load(userptr, "glDrawElementsIndirect");
    tgui_glad_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) load(userptr, "glFramebufferParameteri");
    tgui_glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load(userptr, "glGenProgramPipelines");
    tgui_glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) load(userptr, "glGetBooleani_v");
    tgui_glad_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) load(userptr, "glGetFramebufferParameteriv");
    tgui_glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    tgui_glad_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) load(userptr, "glGetProgramInterfaceiv");
    tgui_glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load(userptr, "glGetProgramPipelineInfoLog");
    tgui_glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load(userptr, "glGetProgramPipelineiv");
    tgui_glad_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) load(userptr, "glGetProgramResourceIndex");
    tgui_glad_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) load(userptr, "glGetProgramResourceLocation");
    tgui_glad_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) load(userptr, "glGetProgramResourceName");
    tgui_glad_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) load(userptr, "glGetProgramResourceiv");
    tgui_glad_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) load(userptr, "glGetTexLevelParameterfv");
    tgui_glad_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) load(userptr, "glGetTexLevelParameteriv");
    tgui_glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load(userptr, "glIsProgramPipeline");
    tgui_glad_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) load(userptr, "glMemoryBarrier");
    tgui_glad_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) load(userptr, "glMemoryBarrierByRegion");
    tgui_glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load(userptr, "glProgramUniform1f");
    tgui_glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load(userptr, "glProgramUniform1fv");
    tgui_glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load(userptr, "glProgramUniform1i");
    tgui_glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load(userptr, "glProgramUniform1iv");
    tgui_glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load(userptr, "glProgramUniform1ui");
    tgui_glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load(userptr, "glProgramUniform1uiv");
    tgui_glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load(userptr, "glProgramUniform2f");
    tgui_glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load(userptr, "glProgramUniform2fv");
    tgui_glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load(userptr, "glProgramUniform2i");
    tgui_glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load(userptr, "glProgramUniform2iv");
    tgui_glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load(userptr, "glProgramUniform2ui");
    tgui_glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load(userptr, "glProgramUniform2uiv");
    tgui_glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load(userptr, "glProgramUniform3f");
    tgui_glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load(userptr, "glProgramUniform3fv");
    tgui_glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load(userptr, "glProgramUniform3i");
    tgui_glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load(userptr, "glProgramUniform3iv");
    tgui_glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load(userptr, "glProgramUniform3ui");
    tgui_glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load(userptr, "glProgramUniform3uiv");
    tgui_glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load(userptr, "glProgramUniform4f");
    tgui_glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load(userptr, "glProgramUniform4fv");
    tgui_glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load(userptr, "glProgramUniform4i");
    tgui_glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load(userptr, "glProgramUniform4iv");
    tgui_glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load(userptr, "glProgramUniform4ui");
    tgui_glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load(userptr, "glProgramUniform4uiv");
    tgui_glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load(userptr, "glProgramUniformMatrix2fv");
    tgui_glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load(userptr, "glProgramUniformMatrix2x3fv");
    tgui_glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load(userptr, "glProgramUniformMatrix2x4fv");
    tgui_glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load(userptr, "glProgramUniformMatrix3fv");
    tgui_glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load(userptr, "glProgramUniformMatrix3x2fv");
    tgui_glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load(userptr, "glProgramUniformMatrix3x4fv");
    tgui_glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load(userptr, "glProgramUniformMatrix4fv");
    tgui_glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load(userptr, "glProgramUniformMatrix4x2fv");
    tgui_glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load(userptr, "glProgramUniformMatrix4x3fv");
    tgui_glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    tgui_glad_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) load(userptr, "glTexStorage2DMultisample");
    tgui_glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load(userptr, "glUseProgramStages");
    tgui_glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load(userptr, "glValidateProgramPipeline");
    tgui_glad_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) load(userptr, "glVertexAttribBinding");
    tgui_glad_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) load(userptr, "glVertexAttribFormat");
    tgui_glad_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) load(userptr, "glVertexAttribIFormat");
    tgui_glad_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) load(userptr, "glVertexBindingDivisor");
}
static void tgui_glad_gl_load_GL_ES_VERSION_3_2( TGUI_GLADuserptrloadfunc load, void* userptr) {
    if(!TGUI_GLAD_GL_ES_VERSION_3_2) return;
    tgui_glad_glBlendBarrier = (PFNGLBLENDBARRIERPROC) load(userptr, "glBlendBarrier");
    tgui_glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) load(userptr, "glBlendEquationSeparatei");
    tgui_glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC) load(userptr, "glBlendEquationi");
    tgui_glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) load(userptr, "glBlendFuncSeparatei");
    tgui_glad_glBlendFunci = (PFNGLBLENDFUNCIPROC) load(userptr, "glBlendFunci");
    tgui_glad_glColorMaski = (PFNGLCOLORMASKIPROC) load(userptr, "glColorMaski");
    tgui_glad_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) load(userptr, "glCopyImageSubData");
    tgui_glad_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) load(userptr, "glDebugMessageCallback");
    tgui_glad_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) load(userptr, "glDebugMessageControl");
    tgui_glad_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) load(userptr, "glDebugMessageInsert");
    tgui_glad_glDisablei = (PFNGLDISABLEIPROC) load(userptr, "glDisablei");
    tgui_glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    tgui_glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    tgui_glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    tgui_glad_glEnablei = (PFNGLENABLEIPROC) load(userptr, "glEnablei");
    tgui_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load(userptr, "glFramebufferTexture");
    tgui_glad_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) load(userptr, "glGetDebugMessageLog");
    tgui_glad_glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) load(userptr, "glGetGraphicsResetStatus");
    tgui_glad_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC) load(userptr, "glGetObjectLabel");
    tgui_glad_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) load(userptr, "glGetObjectPtrLabel");
    tgui_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    tgui_glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load(userptr, "glGetSamplerParameterIiv");
    tgui_glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load(userptr, "glGetSamplerParameterIuiv");
    tgui_glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) load(userptr, "glGetTexParameterIiv");
    tgui_glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) load(userptr, "glGetTexParameterIuiv");
    tgui_glad_glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC) load(userptr, "glGetnUniformfv");
    tgui_glad_glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC) load(userptr, "glGetnUniformiv");
    tgui_glad_glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) load(userptr, "glGetnUniformuiv");
    tgui_glad_glIsEnabledi = (PFNGLISENABLEDIPROC) load(userptr, "glIsEnabledi");
    tgui_glad_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC) load(userptr, "glMinSampleShading");
    tgui_glad_glObjectLabel = (PFNGLOBJECTLABELPROC) load(userptr, "glObjectLabel");
    tgui_glad_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) load(userptr, "glObjectPtrLabel");
    tgui_glad_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) load(userptr, "glPatchParameteri");
    tgui_glad_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) load(userptr, "glPopDebugGroup");
    tgui_glad_glPrimitiveBoundingBox = (PFNGLPRIMITIVEBOUNDINGBOXPROC) load(userptr, "glPrimitiveBoundingBox");
    tgui_glad_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) load(userptr, "glPushDebugGroup");
    tgui_glad_glReadnPixels = (PFNGLREADNPIXELSPROC) load(userptr, "glReadnPixels");
    tgui_glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load(userptr, "glSamplerParameterIiv");
    tgui_glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load(userptr, "glSamplerParameterIuiv");
    tgui_glad_glTexBuffer = (PFNGLTEXBUFFERPROC) load(userptr, "glTexBuffer");
    tgui_glad_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC) load(userptr, "glTexBufferRange");
    tgui_glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) load(userptr, "glTexParameterIiv");
    tgui_glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) load(userptr, "glTexParameterIuiv");
    tgui_glad_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) load(userptr, "glTexStorage3DMultisample");
}


static void tgui_glad_gl_resolve_aliases(void) {
}

#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
#define TGUI_GLAD_GL_IS_SOME_NEW_VERSION 1
#else
#define TGUI_GLAD_GL_IS_SOME_NEW_VERSION 0
#endif

static int tgui_glad_gl_get_extensions( int version, const char **out_exts, unsigned int *out_num_exts_i, char ***out_exts_i) {
#if TGUI_GLAD_GL_IS_SOME_NEW_VERSION
    if(TGUI_GLAD_VERSION_MAJOR(version) < 3) {
#else
    (void) version;
    (void) out_num_exts_i;
    (void) out_exts_i;
#endif
        if (tgui_glad_glGetString == NULL) {
            return 0;
        }
        *out_exts = (const char *)tgui_glad_glGetString(GL_EXTENSIONS);
#if TGUI_GLAD_GL_IS_SOME_NEW_VERSION
    } else {
        unsigned int index = 0;
        unsigned int num_exts_i = 0;
        char **exts_i = NULL;
        if (tgui_glad_glGetStringi == NULL || tgui_glad_glGetIntegerv == NULL) {
            return 0;
        }
        tgui_glad_glGetIntegerv(GL_NUM_EXTENSIONS, (int*) &num_exts_i);
        if (num_exts_i > 0) {
            exts_i = (char **) malloc(num_exts_i * (sizeof *exts_i));
        }
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            const char *gl_str_tmp = (const char*) tgui_glad_glGetStringi(GL_EXTENSIONS, index);
            size_t len = strlen(gl_str_tmp) + 1;

            char *local_str = (char*) malloc(len * sizeof(char));
            if(local_str != NULL) {
                memcpy(local_str, gl_str_tmp, len * sizeof(char));
            }

            exts_i[index] = local_str;
        }

        *out_num_exts_i = num_exts_i;
        *out_exts_i = exts_i;
    }
#endif
    return 1;
}
static void tgui_glad_gl_free_extensions(char **exts_i, unsigned int num_exts_i) {
    if (exts_i != NULL) {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            free((void *) (exts_i[index]));
        }
        free((void *)exts_i);
        exts_i = NULL;
    }
}
static int tgui_glad_gl_has_extension(int version, const char *exts, unsigned int num_exts_i, char **exts_i, const char *ext) {
    if(TGUI_GLAD_VERSION_MAJOR(version) < 3 || !TGUI_GLAD_GL_IS_SOME_NEW_VERSION) {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    } else {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    }
    return 0;
}

static TGUI_GLADapiproc tgui_glad_gl_get_proc_from_userptr(void *userptr, const char* name) {
    return (TGUI_GLAD_GNUC_EXTENSION (TGUI_GLADapiproc (*)(const char *name)) userptr)(name);
}

static int tgui_glad_gl_find_extensions_gles2( int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!tgui_glad_gl_get_extensions(version, &exts, &num_exts_i, &exts_i)) return 0;

    (void) tgui_glad_gl_has_extension;

    tgui_glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int tgui_glad_gl_find_core_gles2(void) {
    int i, major, minor;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        NULL
    };
    version = (const char*) tgui_glad_glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    TGUI_GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    TGUI_GLAD_GL_ES_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    TGUI_GLAD_GL_ES_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    TGUI_GLAD_GL_ES_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    TGUI_GLAD_GL_ES_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;

    return TGUI_GLAD_MAKE_VERSION(major, minor);
}

int tgui_gladLoadGLES2UserPtr( TGUI_GLADuserptrloadfunc load, void *userptr) {
    int version;

    tgui_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(tgui_glad_glGetString == NULL) return 0;
    if(tgui_glad_glGetString(GL_VERSION) == NULL) return 0;
    version = tgui_glad_gl_find_core_gles2();

    tgui_glad_gl_load_GL_ES_VERSION_2_0(load, userptr);
    tgui_glad_gl_load_GL_ES_VERSION_3_0(load, userptr);
    tgui_glad_gl_load_GL_ES_VERSION_3_1(load, userptr);
    tgui_glad_gl_load_GL_ES_VERSION_3_2(load, userptr);

    if (!tgui_glad_gl_find_extensions_gles2(version)) return 0;


    tgui_glad_gl_resolve_aliases();

    return version;
}


int tgui_gladLoadGLES2( TGUI_GLADloadfunc load) {
    return tgui_gladLoadGLES2UserPtr( tgui_glad_gl_get_proc_from_userptr, TGUI_GLAD_GNUC_EXTENSION (void*) load);
}



 


#ifdef __cplusplus
}
#endif

#endif /* TGUI_GLAD_GLES2_IMPLEMENTATION */

